/*
 * Copyright (c) 1997, 2012, Oracle and/or its affiliates. All rights
 * reserved.  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE
 * HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 *
 */

#undef TARGET_ARCH_x86
#define TARGET_ARCH_AARCH64
#define CPU_X86_VM_REGISTER_X86_HPP

#include <stdio.h>
#include <sys/types.h>

#include "precompiled.hpp"
#include "assembler_aarch64.inline.hpp"
#include "asm/assembler.hpp"
#include "assembler_aarch64.hpp"

#include "compiler/disassembler.hpp"
#include "memory/resourceArea.hpp"
#include "runtime/interfaceSupport.hpp"
#include "runtime/sharedRuntime.hpp"

// #include "gc_interface/collectedHeap.inline.hpp"
// #include "interpreter/interpreter.hpp"
// #include "memory/cardTableModRefBS.hpp"
// #include "prims/methodHandles.hpp"
// #include "runtime/biasedLocking.hpp"
// #include "runtime/interfaceSupport.hpp"
// #include "runtime/objectMonitor.hpp"
// #include "runtime/os.hpp"
// #include "runtime/sharedRuntime.hpp"
// #include "runtime/stubRoutines.hpp"
// #ifndef SERIALGC
// #include "gc_implementation/g1/g1CollectedHeap.inline.hpp"
// #include "gc_implementation/g1/g1SATBCardTableModRefBS.hpp"
// #include "gc_implementation/g1/heapRegion.hpp"
// #endif


extern "C" void entry(CodeBuffer *cb);

#define __ _masm.

static float unpack(unsigned value);

void entry(CodeBuffer *cb) {

  // {
  //   for (int i = 0; i < 256; i+=16)
  //     {
  // 	printf("\"%20.20g\", ", unpack(i));
  // 	printf("\"%20.20g\", ", unpack(i+1));
  //     }
  //   printf("\n");
  // }

  MacroAssembler _masm(cb);
  address entry = __ pc();

  // Smoke test for assembler

#if ASSERT
// BEGIN  Generated code -- do not edit
// Generated by aarch64-asmtest.py
    Label back, forth;
    __ bind(back);

// ArithOp
    __ add(r19, r0, r6, Assembler::LSL, 45);           //	add	x19, x0, x6, LSL #45
    __ sub(r5, r11, r21, Assembler::LSR, 51);          //	sub	x5, x11, x21, LSR #51
    __ adds(r5, r27, r21, Assembler::LSL, 1);          //	adds	x5, x27, x21, LSL #1
    __ subs(r24, r25, r27, Assembler::ASR, 10);        //	subs	x24, x25, x27, ASR #10
    __ addw(r20, r12, r6, Assembler::LSR, 7);          //	add	w20, w12, w6, LSR #7
    __ subw(r28, r15, r25, Assembler::ASR, 31);        //	sub	w28, w15, w25, ASR #31
    __ addsw(r10, r28, r24, Assembler::ASR, 26);       //	adds	w10, w28, w24, ASR #26
    __ subsw(r19, r26, r7, Assembler::ASR, 22);        //	subs	w19, w26, w7, ASR #22
    __ andr(r8, r29, r7, Assembler::LSL, 22);          //	and	x8, x29, x7, LSL #22
    __ orr(r20, r16, r19, Assembler::ASR, 47);         //	orr	x20, x16, x19, ASR #47
    __ eor(r11, r29, r25, Assembler::LSL, 48);         //	eor	x11, x29, x25, LSL #48
    __ ands(r11, r3, r21, Assembler::LSL, 35);         //	ands	x11, x3, x21, LSL #35
    __ andw(r11, r18, r8, Assembler::ASR, 23);         //	and	w11, w18, w8, ASR #23
    __ orrw(r4, r9, r4, Assembler::LSL, 15);           //	orr	w4, w9, w4, LSL #15
    __ eorw(r8, r9, r21, Assembler::LSL, 25);          //	eor	w8, w9, w21, LSL #25
    __ andsw(r22, r18, r0, Assembler::ASR, 12);        //	ands	w22, w18, w0, ASR #12
    __ bic(r6, r8, r30, Assembler::LSL, 40);           //	bic	x6, x8, x30, LSL #40
    __ orn(r20, r23, r25, Assembler::ASR, 44);         //	orn	x20, x23, x25, ASR #44
    __ eon(r26, r1, r25, Assembler::ASR, 13);          //	eon	x26, x1, x25, ASR #13
    __ bics(r19, r14, r3, Assembler::LSL, 21);         //	bics	x19, x14, x3, LSL #21
    __ bicw(r7, r24, r9, Assembler::LSL, 27);          //	bic	w7, w24, w9, LSL #27
    __ ornw(r17, r14, r1, Assembler::LSR, 28);         //	orn	w17, w14, w1, LSR #28
    __ eonw(r5, r9, r10, Assembler::ASR, 25);          //	eon	w5, w9, w10, ASR #25
    __ bicsw(r16, r1, r29, Assembler::ASR, 25);        //	bics	w16, w1, w29, ASR #25

// AddSubImmOp
    __ addw(r0, r3, 914u);                             //	add	w0, w3, #914
    __ addsw(r14, r29, 382u);                          //	adds	w14, w29, #382
    __ subw(r11, r1, 560u);                            //	sub	w11, w1, #560
    __ subsw(r30, r17, 359u);                          //	subs	w30, w17, #359
    __ add(r1, r17, 519u);                             //	add	x1, x17, #519
    __ adds(r4, r28, 974u);                            //	adds	x4, x28, #974
    __ sub(r28, r13, 183u);                            //	sub	x28, x13, #183
    __ subs(r0, r21, 475u);                            //	subs	x0, x21, #475

// LogicalImmOp
    __ andw(r25, r24, 67108608ul);                     //	and	w25, w24, #0x3ffff00
    __ orrw(r19, r9, 2151677951ul);                    //	orr	w19, w9, #0x803fffff
    __ eorw(r24, r19, 4229955583ul);                   //	eor	w24, w19, #0xfc1fffff
    __ andsw(r10, r10, 3758350339ul);                  //	ands	w10, w10, #0xe003e003
    __ andr(r2, r2, 18446735277616531455ul);           //	and	x2, x2, #0xfffff800000007ff
    __ orr(r11, r28, 4160749568ul);                    //	orr	x11, x28, #0xf8000000
    __ eor(r17, r24, 18158513714670600195ul);          //	eor	x17, x24, #0xfc000003fc000003
    __ ands(r25, r7, 18446744069548802047ul);          //	ands	x25, x7, #0xffffffff07ffffff

// AbsOp
    __ b(__ pc());                                     //	b	.
    __ b(back);                                        //	b	back
    __ b(forth);                                       //	b	forth
    __ bl(__ pc());                                    //	bl	.
    __ bl(back);                                       //	bl	back
    __ bl(forth);                                      //	bl	forth

// RegAndAbsOp
    __ cbzw(r6, __ pc());                              //	cbz	w6, .
    __ cbzw(r6, back);                                 //	cbz	w6, back
    __ cbzw(r6, forth);                                //	cbz	w6, forth
    __ cbnzw(r1, __ pc());                             //	cbnz	w1, .
    __ cbnzw(r1, back);                                //	cbnz	w1, back
    __ cbnzw(r1, forth);                               //	cbnz	w1, forth
    __ cbz(r7, __ pc());                               //	cbz	x7, .
    __ cbz(r7, back);                                  //	cbz	x7, back
    __ cbz(r7, forth);                                 //	cbz	x7, forth
    __ cbnz(r11, __ pc());                             //	cbnz	x11, .
    __ cbnz(r11, back);                                //	cbnz	x11, back
    __ cbnz(r11, forth);                               //	cbnz	x11, forth
    __ adr(r19, __ pc());                              //	adr	x19, .
    __ adr(r19, back);                                 //	adr	x19, back
    __ adr(r19, forth);                                //	adr	x19, forth
    __ adrp(r7, __ pc());                              //	adrp	x7, .

// RegImmAbsOp
    __ tbz(r27, 3, __ pc());                           //	tbz	x27, #3, .
    __ tbz(r27, 3, back);                              //	tbz	x27, #3, back
    __ tbz(r27, 3, forth);                             //	tbz	x27, #3, forth
    __ tbnz(r15, 5, __ pc());                          //	tbnz	x15, #5, .
    __ tbnz(r15, 5, back);                             //	tbnz	x15, #5, back
    __ tbnz(r15, 5, forth);                            //	tbnz	x15, #5, forth

// MoveWideImmOp
    __ movnw(r5, 17275, 16);                           //	movn	w5, #17275, lsl 16
    __ movzw(r16, 7242, 0);                            //	movz	w16, #7242, lsl 0
    __ movkw(r17, 18395, 0);                           //	movk	w17, #18395, lsl 0
    __ movn(r9, 29611, 32);                            //	movn	x9, #29611, lsl 32
    __ movz(r27, 28584, 16);                           //	movz	x27, #28584, lsl 16
    __ movk(r20, 23437, 32);                           //	movk	x20, #23437, lsl 32

// BitfieldOp
    __ sbfm(r3, r13, 10, 29);                          //	sbfm	x3, x13, #10, #29
    __ bfmw(r20, r25, 6, 24);                          //	bfm	w20, w25, #6, #24
    __ ubfmw(r9, r25, 1, 18);                          //	ubfm	w9, w25, #1, #18
    __ sbfm(r6, r16, 24, 27);                          //	sbfm	x6, x16, #24, #27
    __ bfm(r1, r19, 30, 5);                            //	bfm	x1, x19, #30, #5
    __ ubfm(r5, r29, 20, 17);                          //	ubfm	x5, x29, #20, #17

// ExtractOp
    __ extrw(r0, r9, r6, 11);                          //	extr	w0, w9, w6, #11
    __ extr(r28, r23, r8, 53);                         //	extr	x28, x23, x8, #53

// CondBranchOp
    __ br(Assembler::EQ, __ pc());                     //	b.EQ	.
    __ br(Assembler::EQ, back);                        //	b.EQ	back
    __ br(Assembler::EQ, forth);                       //	b.EQ	forth
    __ br(Assembler::NE, __ pc());                     //	b.NE	.
    __ br(Assembler::NE, back);                        //	b.NE	back
    __ br(Assembler::NE, forth);                       //	b.NE	forth
    __ br(Assembler::HS, __ pc());                     //	b.HS	.
    __ br(Assembler::HS, back);                        //	b.HS	back
    __ br(Assembler::HS, forth);                       //	b.HS	forth
    __ br(Assembler::CS, __ pc());                     //	b.CS	.
    __ br(Assembler::CS, back);                        //	b.CS	back
    __ br(Assembler::CS, forth);                       //	b.CS	forth
    __ br(Assembler::LO, __ pc());                     //	b.LO	.
    __ br(Assembler::LO, back);                        //	b.LO	back
    __ br(Assembler::LO, forth);                       //	b.LO	forth
    __ br(Assembler::CC, __ pc());                     //	b.CC	.
    __ br(Assembler::CC, back);                        //	b.CC	back
    __ br(Assembler::CC, forth);                       //	b.CC	forth
    __ br(Assembler::MI, __ pc());                     //	b.MI	.
    __ br(Assembler::MI, back);                        //	b.MI	back
    __ br(Assembler::MI, forth);                       //	b.MI	forth
    __ br(Assembler::PL, __ pc());                     //	b.PL	.
    __ br(Assembler::PL, back);                        //	b.PL	back
    __ br(Assembler::PL, forth);                       //	b.PL	forth
    __ br(Assembler::VS, __ pc());                     //	b.VS	.
    __ br(Assembler::VS, back);                        //	b.VS	back
    __ br(Assembler::VS, forth);                       //	b.VS	forth
    __ br(Assembler::VC, __ pc());                     //	b.VC	.
    __ br(Assembler::VC, back);                        //	b.VC	back
    __ br(Assembler::VC, forth);                       //	b.VC	forth
    __ br(Assembler::HI, __ pc());                     //	b.HI	.
    __ br(Assembler::HI, back);                        //	b.HI	back
    __ br(Assembler::HI, forth);                       //	b.HI	forth
    __ br(Assembler::LS, __ pc());                     //	b.LS	.
    __ br(Assembler::LS, back);                        //	b.LS	back
    __ br(Assembler::LS, forth);                       //	b.LS	forth
    __ br(Assembler::GE, __ pc());                     //	b.GE	.
    __ br(Assembler::GE, back);                        //	b.GE	back
    __ br(Assembler::GE, forth);                       //	b.GE	forth
    __ br(Assembler::LT, __ pc());                     //	b.LT	.
    __ br(Assembler::LT, back);                        //	b.LT	back
    __ br(Assembler::LT, forth);                       //	b.LT	forth
    __ br(Assembler::GT, __ pc());                     //	b.GT	.
    __ br(Assembler::GT, back);                        //	b.GT	back
    __ br(Assembler::GT, forth);                       //	b.GT	forth
    __ br(Assembler::LE, __ pc());                     //	b.LE	.
    __ br(Assembler::LE, back);                        //	b.LE	back
    __ br(Assembler::LE, forth);                       //	b.LE	forth
    __ br(Assembler::AL, __ pc());                     //	b.AL	.
    __ br(Assembler::AL, back);                        //	b.AL	back
    __ br(Assembler::AL, forth);                       //	b.AL	forth
    __ br(Assembler::NV, __ pc());                     //	b.NV	.
    __ br(Assembler::NV, back);                        //	b.NV	back
    __ br(Assembler::NV, forth);                       //	b.NV	forth

// ImmOp
    __ svc(7584);                                      //	svc	#7584
    __ hvc(24456);                                     //	hvc	#24456
    __ smc(16627);                                     //	smc	#16627
    __ brk(24477);                                     //	brk	#24477
    __ hlt(21407);                                     //	hlt	#21407

// Op
    __ nop();                                          //	nop	
    __ eret();                                         //	eret	
    __ drps();                                         //	drps	
    __ isb();                                          //	isb	

// SystemOp
    __ dsb(Assembler::OSHLD);                          //	dsb	OSHLD
    __ dmb(Assembler::SY);                             //	dmb	SY

// OneRegOp
    __ br(r2);                                         //	br	x2
    __ blr(r14);                                       //	blr	x14

// LoadStoreExclusiveOp
    __ stxr(r24, r26, r23);                            //	stxr	w24, x26, [x23]
    __ stlxr(r10, r29, r22);                           //	stlxr	w10, x29, [x22]
    __ ldxr(r17, r2);                                  //	ldxr	x17, [x2]
    __ ldaxr(r17, r11);                                //	ldaxr	x17, [x11]
    __ stlr(r25, r8);                                  //	stlr	x25, [x8]
    __ ldar(r13, r12);                                 //	ldar	x13, [x12]

// LoadStoreExclusiveOp
    __ stxrw(r11, r23, r23);                           //	stxr	w11, w23, [x23]
    __ stlxrw(r22, r21, r4);                           //	stlxr	w22, w21, [x4]
    __ ldxrw(r8, r29);                                 //	ldxr	w8, [x29]
    __ ldaxrw(r10, r22);                               //	ldaxr	w10, [x22]
    __ stlrw(r9, r23);                                 //	stlr	w9, [x23]
    __ ldarw(r24, r18);                                //	ldar	w24, [x18]

// LoadStoreExclusiveOp
    __ stxrh(r17, r5, r3);                             //	stxrh	w17, w5, [x3]
    __ stlxrh(r19, r7, r16);                           //	stlxrh	w19, w7, [x16]
    __ ldxrh(r0, r16);                                 //	ldxrh	w0, [x16]
    __ ldaxrh(r14, r1);                                //	ldaxrh	w14, [x1]
    __ stlrh(r18, r10);                                //	stlrh	w18, [x10]
    __ ldarh(r9, r12);                                 //	ldarh	w9, [x12]

// LoadStoreExclusiveOp
    __ stxrb(r22, r11, r7);                            //	stxrb	w22, w11, [x7]
    __ stlxrb(r12, r6, r17);                           //	stlxrb	w12, w6, [x17]
    __ ldxrb(r12, r0);                                 //	ldxrb	w12, [x0]
    __ ldaxrb(r14, r20);                               //	ldaxrb	w14, [x20]
    __ stlrb(r7, r20);                                 //	stlrb	w7, [x20]
    __ ldarb(r19, r17);                                //	ldarb	w19, [x17]

// LoadStoreExclusiveOp
    __ ldxp(r4, r22, r22);                             //	ldxp	x4, x22, [x22]
    __ ldaxp(r26, r5, r25);                            //	ldaxp	x26, x5, [x25]
    __ stxp(r2, r3, r12, r12);                         //	stxp	w2, x3, x12, [x12]
    __ stlxp(r27, r10, r24, r24);                      //	stlxp	w27, x10, x24, [x24]

// LoadStoreExclusiveOp
    __ ldxpw(r11, r2, r18);                            //	ldxp	w11, w2, [x18]
    __ ldaxpw(r21, r10, r27);                          //	ldaxp	w21, w10, [x27]
    __ stxpw(r17, r12, r24, r1);                       //	stxp	w17, w12, w24, [x1]
    __ stlxpw(r15, r14, r17, r19);                     //	stlxp	w15, w14, w17, [x19]

// base_plus_unscaled_offset 
// LoadStoreOp
    __ str(r7, Address(r22, -159));                    //	str	x7, [x22, -159]
    __ strw(r20, Address(r18, -101));                  //	str	w20, [x18, -101]
    __ strb(r15, Address(r23, -13));                   //	strb	w15, [x23, -13]
    __ strh(r6, Address(r29, -46));                    //	strh	w6, [x29, -46]
    __ ldr(r13, Address(r20, 47));                     //	ldr	x13, [x20, 47]
    __ ldrw(r23, Address(r28, -31));                   //	ldr	w23, [x28, -31]
    __ ldrb(r18, Address(r9, -15));                    //	ldrb	w18, [x9, -15]
    __ ldrh(r20, Address(r13, 6));                     //	ldrh	w20, [x13, 6]
    __ ldrsb(r19, Address(r19, 11));                   //	ldrsb	x19, [x19, 11]
    __ ldrsh(r12, Address(r2, 25));                    //	ldrsh	x12, [x2, 25]
    __ ldrshw(r14, Address(r9, -32));                  //	ldrsh	w14, [x9, -32]
    __ ldrsw(r16, Address(r24, -20));                  //	ldrsw	x16, [x24, -20]
    __ ldrd(v29, Address(r19, -225));                  //	ldr	d29, [x19, -225]
    __ ldrs(v25, Address(r26, 35));                    //	ldr	s25, [x26, 35]
    __ strd(v22, Address(r21, -73));                   //	str	d22, [x21, -73]
    __ strs(v20, Address(r24, -124));                  //	str	s20, [x24, -124]

// pre 
// LoadStoreOp
    __ str(r20, Address(__ pre(r5, -83)));             //	str	x20, [x5, -83]!
    __ strw(r26, Address(__ pre(r17, -126)));          //	str	w26, [x17, -126]!
    __ strb(r28, Address(__ pre(r20, -5)));            //	strb	w28, [x20, -5]!
    __ strh(r23, Address(__ pre(r15, -23)));           //	strh	w23, [x15, -23]!
    __ ldr(r6, Address(__ pre(r0, -164)));             //	ldr	x6, [x0, -164]!
    __ ldrw(r3, Address(__ pre(r16, 33)));             //	ldr	w3, [x16, 33]!
    __ ldrb(r3, Address(__ pre(r30, -24)));            //	ldrb	w3, [x30, -24]!
    __ ldrh(r11, Address(__ pre(r20, -52)));           //	ldrh	w11, [x20, -52]!
    __ ldrsb(r9, Address(__ pre(r9, -17)));            //	ldrsb	x9, [x9, -17]!
    __ ldrsh(r24, Address(__ pre(r17, -30)));          //	ldrsh	x24, [x17, -30]!
    __ ldrshw(r21, Address(__ pre(r14, -5)));          //	ldrsh	w21, [x14, -5]!
    __ ldrsw(r19, Address(__ pre(r3, 8)));             //	ldrsw	x19, [x3, 8]!
    __ ldrd(v21, Address(__ pre(r13, -256)));          //	ldr	d21, [x13, -256]!
    __ ldrs(v7, Address(__ pre(r8, -38)));             //	ldr	s7, [x8, -38]!
    __ strd(v9, Address(__ pre(r15, 120)));            //	str	d9, [x15, 120]!
    __ strs(v9, Address(__ pre(r17, 45)));             //	str	s9, [x17, 45]!

// post 
// LoadStoreOp
    __ str(r16, Address(__ post(r28, 55)));            //	str	x16, [x28], 55
    __ strw(r15, Address(__ post(r1, -67)));           //	str	w15, [x1], -67
    __ strb(r30, Address(__ post(r28, -15)));          //	strb	w30, [x28], -15
    __ strh(r0, Address(__ post(r7, -47)));            //	strh	w0, [x7], -47
    __ ldr(r21, Address(__ post(r27, -246)));          //	ldr	x21, [x27], -246
    __ ldrw(r9, Address(__ post(r5, 0)));              //	ldr	w9, [x5], 0
    __ ldrb(r13, Address(__ post(r9, 15)));            //	ldrb	w13, [x9], 15
    __ ldrh(r15, Address(__ post(r20, -22)));          //	ldrh	w15, [x20], -22
    __ ldrsb(r0, Address(__ post(r4, -20)));           //	ldrsb	x0, [x4], -20
    __ ldrsh(r6, Address(__ post(r9, 12)));            //	ldrsh	x6, [x9], 12
    __ ldrshw(r7, Address(__ post(r9, 22)));           //	ldrsh	w7, [x9], 22
    __ ldrsw(r22, Address(__ post(r6, -86)));          //	ldrsw	x22, [x6], -86
    __ ldrd(v14, Address(__ post(r9, -64)));           //	ldr	d14, [x9], -64
    __ ldrs(v7, Address(__ post(r19, -66)));           //	ldr	s7, [x19], -66
    __ strd(v24, Address(__ post(r0, -233)));          //	str	d24, [x0], -233
    __ strs(v1, Address(__ post(r24, 1)));             //	str	s1, [x24], 1

// base_plus_reg 
// LoadStoreOp
    __ str(r2, Address(r30, r20, Address::lsl(0)));    //	str	x2, [x30, x20, lsl #0]
    __ strw(r14, Address(r5, r18, Address::sxtw(2)));  //	str	w14, [x5, w18, sxtw #2]
    __ strb(r22, Address(r25, r26, Address::sxtw(0))); //	strb	w22, [x25, w26, sxtw #0]
    __ strh(r30, Address(r17, r15, Address::sxtx(0))); //	strh	w30, [x17, x15, sxtx #0]
    __ ldr(r12, Address(r8, r3, Address::sxtx(0)));    //	ldr	x12, [x8, x3, sxtx #0]
    __ ldrw(r11, Address(r3, r2, Address::sxtx(0)));   //	ldr	w11, [x3, x2, sxtx #0]
    __ ldrb(r28, Address(r20, r8, Address::sxtw(0)));  //	ldrb	w28, [x20, w8, sxtw #0]
    __ ldrh(r14, Address(r28, r30, Address::uxtw(1))); //	ldrh	w14, [x28, w30, uxtw #1]
    __ ldrsb(r25, Address(r6, r6, Address::uxtw(0)));  //	ldrsb	x25, [x6, w6, uxtw #0]
    __ ldrsh(r12, Address(r18, r3, Address::sxtw(1))); //	ldrsh	x12, [x18, w3, sxtw #1]
    __ ldrshw(r22, Address(r15, r13, Address::sxtw(1))); //	ldrsh	w22, [x15, w13, sxtw #1]
    __ ldrsw(r25, Address(r28, r4, Address::sxtx(0))); //	ldrsw	x25, [x28, x4, sxtx #0]
    __ ldrd(v2, Address(r2, r8, Address::lsl(0)));     //	ldr	d2, [x2, x8, lsl #0]
    __ ldrs(v27, Address(r29, r7, Address::sxtw(0)));  //	ldr	s27, [x29, w7, sxtw #0]
    __ strd(v15, Address(r4, r1, Address::sxtw(3)));   //	str	d15, [x4, w1, sxtw #3]
    __ strs(v27, Address(r23, r1, Address::lsl(0)));   //	str	s27, [x23, x1, lsl #0]

// base_plus_scaled_offset 
// LoadStoreOp
    __ str(r26, Address(r3, 16216));                   //	str	x26, [x3, 16216]
    __ strw(r16, Address(r21, 6152));                  //	str	w16, [x21, 6152]
    __ strb(r18, Address(r18, 1862));                  //	strb	w18, [x18, 1862]
    __ strh(r15, Address(r16, 3534));                  //	strh	w15, [x16, 3534]
    __ ldr(r3, Address(r24, 12656));                   //	ldr	x3, [x24, 12656]
    __ ldrw(r13, Address(r18, 6416));                  //	ldr	w13, [x18, 6416]
    __ ldrb(r12, Address(r24, 1675));                  //	ldrb	w12, [x24, 1675]
    __ ldrh(r5, Address(r5, 4086));                    //	ldrh	w5, [x5, 4086]
    __ ldrsb(r18, Address(r8, 1844));                  //	ldrsb	x18, [x8, 1844]
    __ ldrsh(r15, Address(r26, 3152));                 //	ldrsh	x15, [x26, 3152]
    __ ldrshw(r26, Address(r24, 3808));                //	ldrsh	w26, [x24, 3808]
    __ ldrsw(r16, Address(r11, 6624));                 //	ldrsw	x16, [x11, 6624]
    __ ldrd(v10, Address(r15, 13528));                 //	ldr	d10, [x15, 13528]
    __ ldrs(v24, Address(r30, 8172));                  //	ldr	s24, [x30, 8172]
    __ strd(v12, Address(r29, 13312));                 //	str	d12, [x29, 13312]
    __ strs(v0, Address(r25, 7596));                   //	str	s0, [x25, 7596]

// pcrel 
// LoadStoreOp
    __ ldr(r29, back);                                 //	ldr	x29, back
    __ ldrw(r16, __ pc());                             //	ldr	w16, .

// LoadStoreOp
    __ prfm(Address(r19, 55));                         //	prfm	PLDL1KEEP, [x19, 55]

// LoadStoreOp
    __ prfm(forth);                                    //	prfm	PLDL1KEEP, forth

// LoadStoreOp
    __ prfm(Address(r2, r27, Address::uxtw(3)));       //	prfm	PLDL1KEEP, [x2, w27, uxtw #3]

// LoadStoreOp
    __ prfm(Address(r14, 14920));                      //	prfm	PLDL1KEEP, [x14, 14920]

// AddSubCarryOp
    __ adcw(r27, r28, r21);                            //	adc	w27, w28, w21
    __ adcsw(r5, r3, r27);                             //	adcs	w5, w3, w27
    __ sbcw(r29, r12, r11);                            //	sbc	w29, w12, w11
    __ sbcsw(r12, r21, r16);                           //	sbcs	w12, w21, w16
    __ adc(r1, r25, r22);                              //	adc	x1, x25, x22
    __ adcs(r10, r19, r4);                             //	adcs	x10, x19, x4
    __ sbc(r13, r2, r16);                              //	sbc	x13, x2, x16
    __ sbcs(r3, r18, r18);                             //	sbcs	x3, x18, x18

// AddSubExtendedOp
    __ addw(r8, r22, r29, ext::sxth, 3);               //	add	w8, w22, w29, sxth #3
    __ addsw(r17, r3, r0, ext::sxth, 2);               //	adds	w17, w3, w0, sxth #2
    __ sub(r13, r26, r5, ext::sxth, 2);                //	sub	x13, x26, x5, sxth #2
    __ subsw(r13, r30, r16, ext::uxtw, 4);             //	subs	w13, w30, w16, uxtw #4
    __ add(r9, r6, r2, ext::uxtb, 3);                  //	add	x9, x6, x2, uxtb #3
    __ adds(r20, r17, r11, ext::uxtb, 3);              //	adds	x20, x17, x11, uxtb #3
    __ sub(r17, r19, r16, ext::uxtb, 3);               //	sub	x17, x19, x16, uxtb #3
    __ subs(r21, r22, r24, ext::sxth, 4);              //	subs	x21, x22, x24, sxth #4

// ConditionalCompareOp
    __ ccmnw(r24, r25, 11u, Assembler::GE);            //	ccmn	w24, w25, #11, GE
    __ ccmpw(r9, r0, 14u, Assembler::LO);              //	ccmp	w9, w0, #14, LO
    __ ccmn(r14, r27, 7u, Assembler::PL);              //	ccmn	x14, x27, #7, PL
    __ ccmp(r1, r26, 5u, Assembler::LE);               //	ccmp	x1, x26, #5, LE

// ConditionalCompareImmedOp
    __ ccmnw(r27, 6, 2, Assembler::EQ);                //	ccmn	w27, #6, #2, EQ
    __ ccmpw(r23, 23, 5, Assembler::CS);               //	ccmp	w23, #23, #5, CS
    __ ccmn(r16, 11, 8, Assembler::GT);                //	ccmn	x16, #11, #8, GT
    __ ccmp(r20, 11, 14, Assembler::LT);               //	ccmp	x20, #11, #14, LT

// ConditionalSelectOp
    __ cselw(r14, r19, r9, Assembler::HS);             //	csel	w14, w19, w9, HS
    __ csincw(r10, r25, r13, Assembler::LE);           //	csinc	w10, w25, w13, LE
    __ csinvw(r1, r24, r26, Assembler::LS);            //	csinv	w1, w24, w26, LS
    __ csnegw(r4, r29, r6, Assembler::LO);             //	csneg	w4, w29, w6, LO
    __ csel(r18, r24, r8, Assembler::VS);              //	csel	x18, x24, x8, VS
    __ csinc(r1, r25, r7, Assembler::VC);              //	csinc	x1, x25, x7, VC
    __ csinv(r13, r22, r20, Assembler::HS);            //	csinv	x13, x22, x20, HS
    __ csneg(r6, r1, r9, Assembler::LS);               //	csneg	x6, x1, x9, LS

// TwoRegOp
    __ rbitw(r5, r20);                                 //	rbit	w5, w20
    __ rev16w(r17, r16);                               //	rev16	w17, w16
    __ revw(r7, r18);                                  //	rev	w7, w18
    __ clzw(r10, r4);                                  //	clz	w10, w4
    __ clsw(r11, r5);                                  //	cls	w11, w5
    __ rbit(r24, r16);                                 //	rbit	x24, x16
    __ rev16(r28, r8);                                 //	rev16	x28, x8
    __ rev32(r12, r9);                                 //	rev32	x12, x9
    __ rev(r10, r12);                                  //	rev	x10, x12
    __ clz(r13, r19);                                  //	clz	x13, x19
    __ cls(r16, r2);                                   //	cls	x16, x2

// ThreeRegOp
    __ udivw(r15, r28, r22);                           //	udiv	w15, w28, w22
    __ sdivw(r27, r26, r11);                           //	sdiv	w27, w26, w11
    __ lslvw(r26, r14, r9);                            //	lslv	w26, w14, w9
    __ lsrvw(r18, r19, r2);                            //	lsrv	w18, w19, w2
    __ asrvw(r22, r27, r9);                            //	asrv	w22, w27, w9
    __ rorvw(r8, r28, r18);                            //	rorv	w8, w28, w18
    __ udiv(r15, r18, r10);                            //	udiv	x15, x18, x10
    __ sdiv(r13, r27, r17);                            //	sdiv	x13, x27, x17
    __ lslv(r17, r22, r28);                            //	lslv	x17, x22, x28
    __ lsrv(r9, r15, r30);                             //	lsrv	x9, x15, x30
    __ asrv(r20, r27, r10);                            //	asrv	x20, x27, x10
    __ rorv(r30, r29, r9);                             //	rorv	x30, x29, x9

// FourRegMulOp
    __ maddw(r13, r18, r14, r29);                      //	madd	w13, w18, w14, w29
    __ msubw(r5, r27, r21, r2);                        //	msub	w5, w27, w21, w2
    __ madd(r30, r19, r30, r19);                       //	madd	x30, x19, x30, x19
    __ msub(r26, r28, r9, r1);                         //	msub	x26, x28, x9, x1
    __ smaddl(r8, r28, r11, r5);                       //	smaddl	x8, w28, w11, x5
    __ smsubl(r16, r19, r29, r10);                     //	smsubl	x16, w19, w29, x10
    __ umaddl(r22, r2, r15, r27);                      //	umaddl	x22, w2, w15, x27
    __ umsubl(r8, r11, r4, r2);                        //	umsubl	x8, w11, w4, x2

// ThreeRegFloatOp
    __ fmuls(v7, v30, v5);                             //	fmul	s7, s30, s5
    __ fdivs(v29, v24, v4);                            //	fdiv	s29, s24, s4
    __ fadds(v25, v20, v22);                           //	fadd	s25, s20, s22
    __ fsubs(v0, v22, v27);                            //	fsub	s0, s22, s27
    __ fmuls(v29, v17, v5);                            //	fmul	s29, s17, s5
    __ fmuld(v7, v13, v9);                             //	fmul	d7, d13, d9
    __ fdivd(v15, v18, v17);                           //	fdiv	d15, d18, d17
    __ faddd(v12, v20, v27);                           //	fadd	d12, d20, d27
    __ fsubd(v8, v13, v23);                            //	fsub	d8, d13, d23
    __ fmuld(v2, v4, v8);                              //	fmul	d2, d4, d8

// FourRegFloatOp
    __ fmadds(v22, v30, v5, v6);                       //	fmadd	s22, s30, s5, s6
    __ fmsubs(v18, v0, v14, v6);                       //	fmsub	s18, s0, s14, s6
    __ fnmadds(v13, v3, v24, v15);                     //	fnmadd	s13, s3, s24, s15
    __ fnmadds(v4, v22, v28, v20);                     //	fnmadd	s4, s22, s28, s20
    __ fmaddd(v4, v9, v2, v2);                         //	fmadd	d4, d9, d2, d2
    __ fmsubd(v18, v29, v22, v15);                     //	fmsub	d18, d29, d22, d15
    __ fnmaddd(v0, v26, v1, v23);                      //	fnmadd	d0, d26, d1, d23
    __ fnmaddd(v24, v6, v16, v15);                     //	fnmadd	d24, d6, d16, d15

// TwoRegFloatOp
    __ fmovs(v17, v6);                                 //	fmov	s17, s6
    __ fabss(v2, v20);                                 //	fabs	s2, s20
    __ fnegs(v10, v5);                                 //	fneg	s10, s5
    __ fsqrts(v23, v22);                               //	fsqrt	s23, s22
    __ fcvts(v21, v4);                                 //	fcvt	d21, s4
    __ fmovd(v17, v15);                                //	fmov	d17, d15
    __ fabsd(v0, v17);                                 //	fabs	d0, d17
    __ fnegd(v7, v6);                                  //	fneg	d7, d6
    __ fsqrtd(v4, v9);                                 //	fsqrt	d4, d9
    __ fcvtd(v1, v0);                                  //	fcvt	s1, d0

// FloatConvertOp
    __ fcvtzsw(r16, v22);                              //	fcvtzs	w16, s22
    __ fcvtzs(r13, v3);                                //	fcvtzs	x13, s3
    __ fcvtzdw(r15, v18);                              //	fcvtzs	w15, d18
    __ fcvtzd(r13, v7);                                //	fcvtzs	x13, d7
    __ scvtfws(v30, r20);                              //	scvtf	s30, w20
    __ scvtfs(v0, r7);                                 //	scvtf	s0, x7
    __ scvtfwd(v6, r20);                               //	scvtf	d6, w20
    __ scvtfd(v11, r12);                               //	scvtf	d11, x12
    __ fmovs(r22, v13);                                //	fmov	w22, s13
    __ fmovd(r29, v12);                                //	fmov	x29, d12
    __ fmovs(v17, r9);                                 //	fmov	s17, w9
    __ fmovd(v6, r3);                                  //	fmov	d6, x3

// TwoRegFloatOp
    __ fcmps(v22, v19);                                //	fcmp	s22, s19
    __ fcmpd(v17, v0);                                 //	fcmp	d17, d0
    __ fcmps(v16, 0.0);                                //	fcmp	s16, #0.0
    __ fcmpd(v13, 0.0);                                //	fcmp	d13, #0.0

// FloatImmediateOp
    __ fmovd(v0, 2.0);                                 //	fmov d0, #2.0
    __ fmovd(v0, 2.125);                               //	fmov d0, #2.125
    __ fmovd(v0, 4.0);                                 //	fmov d0, #4.0
    __ fmovd(v0, 4.25);                                //	fmov d0, #4.25
    __ fmovd(v0, 8.0);                                 //	fmov d0, #8.0
    __ fmovd(v0, 8.5);                                 //	fmov d0, #8.5
    __ fmovd(v0, 16.0);                                //	fmov d0, #16.0
    __ fmovd(v0, 17.0);                                //	fmov d0, #17.0
    __ fmovd(v0, 0.125);                               //	fmov d0, #0.125
    __ fmovd(v0, 0.1328125);                           //	fmov d0, #0.1328125
    __ fmovd(v0, 0.25);                                //	fmov d0, #0.25
    __ fmovd(v0, 0.265625);                            //	fmov d0, #0.265625
    __ fmovd(v0, 0.5);                                 //	fmov d0, #0.5
    __ fmovd(v0, 0.53125);                             //	fmov d0, #0.53125
    __ fmovd(v0, 1.0);                                 //	fmov d0, #1.0
    __ fmovd(v0, 1.0625);                              //	fmov d0, #1.0625
    __ fmovd(v0, -2.0);                                //	fmov d0, #-2.0
    __ fmovd(v0, -2.125);                              //	fmov d0, #-2.125
    __ fmovd(v0, -4.0);                                //	fmov d0, #-4.0
    __ fmovd(v0, -4.25);                               //	fmov d0, #-4.25
    __ fmovd(v0, -8.0);                                //	fmov d0, #-8.0
    __ fmovd(v0, -8.5);                                //	fmov d0, #-8.5
    __ fmovd(v0, -16.0);                               //	fmov d0, #-16.0
    __ fmovd(v0, -17.0);                               //	fmov d0, #-17.0
    __ fmovd(v0, -0.125);                              //	fmov d0, #-0.125
    __ fmovd(v0, -0.1328125);                          //	fmov d0, #-0.1328125
    __ fmovd(v0, -0.25);                               //	fmov d0, #-0.25
    __ fmovd(v0, -0.265625);                           //	fmov d0, #-0.265625
    __ fmovd(v0, -0.5);                                //	fmov d0, #-0.5
    __ fmovd(v0, -0.53125);                            //	fmov d0, #-0.53125
    __ fmovd(v0, -1.0);                                //	fmov d0, #-1.0
    __ fmovd(v0, -1.0625);                             //	fmov d0, #-1.0625

    __ bind(forth);

/*
aarch64ops.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <back>:
   0:	8b06b413 	add	x19, x0, x6, lsl #45
   4:	cb55cd65 	sub	x5, x11, x21, lsr #51
   8:	ab150765 	adds	x5, x27, x21, lsl #1
   c:	eb9b2b38 	subs	x24, x25, x27, asr #10
  10:	0b461d94 	add	w20, w12, w6, lsr #7
  14:	4b997dfc 	sub	w28, w15, w25, asr #31
  18:	2b986b8a 	adds	w10, w28, w24, asr #26
  1c:	6b875b53 	subs	w19, w26, w7, asr #22
  20:	8a075ba8 	and	x8, x29, x7, lsl #22
  24:	aa93be14 	orr	x20, x16, x19, asr #47
  28:	ca19c3ab 	eor	x11, x29, x25, lsl #48
  2c:	ea158c6b 	ands	x11, x3, x21, lsl #35
  30:	0a885e4b 	and	w11, w18, w8, asr #23
  34:	2a043d24 	orr	w4, w9, w4, lsl #15
  38:	4a156528 	eor	w8, w9, w21, lsl #25
  3c:	6a803256 	ands	w22, w18, w0, asr #12
  40:	8a3ea106 	bic	x6, x8, x30, lsl #40
  44:	aab9b2f4 	orn	x20, x23, x25, asr #44
  48:	cab9343a 	eon	x26, x1, x25, asr #13
  4c:	ea2355d3 	bics	x19, x14, x3, lsl #21
  50:	0a296f07 	bic	w7, w24, w9, lsl #27
  54:	2a6171d1 	orn	w17, w14, w1, lsr #28
  58:	4aaa6525 	eon	w5, w9, w10, asr #25
  5c:	6abd6430 	bics	w16, w1, w29, asr #25
  60:	110e4860 	add	w0, w3, #0x392
  64:	3105fbae 	adds	w14, w29, #0x17e
  68:	5108c02b 	sub	w11, w1, #0x230
  6c:	71059e3e 	subs	w30, w17, #0x167
  70:	91081e21 	add	x1, x17, #0x207
  74:	b10f3b84 	adds	x4, x28, #0x3ce
  78:	d102ddbc 	sub	x28, x13, #0xb7
  7c:	f1076ea0 	subs	x0, x21, #0x1db
  80:	12184719 	and	w25, w24, #0x3ffff00
  84:	32015933 	orr	w19, w9, #0x803fffff
  88:	52066a78 	eor	w24, w19, #0xfc1fffff
  8c:	7203914a 	ands	w10, w10, #0xe003e003
  90:	92557c42 	and	x2, x2, #0xfffff800000007ff
  94:	b265138b 	orr	x11, x28, #0xf8000000
  98:	d2061f11 	eor	x17, x24, #0xfc000003fc000003
  9c:	f260e8f9 	ands	x25, x7, #0xffffffff07ffffff
  a0:	14000000 	b	a0 <back+0xa0>
  a4:	17ffffd7 	b	0 <back>
  a8:	1400016c 	b	658 <forth>
  ac:	94000000 	bl	ac <back+0xac>
  b0:	97ffffd4 	bl	0 <back>
  b4:	94000169 	bl	658 <forth>
  b8:	34000006 	cbz	w6, b8 <back+0xb8>
  bc:	34fffa26 	cbz	w6, 0 <back>
  c0:	34002cc6 	cbz	w6, 658 <forth>
  c4:	35000001 	cbnz	w1, c4 <back+0xc4>
  c8:	35fff9c1 	cbnz	w1, 0 <back>
  cc:	35002c61 	cbnz	w1, 658 <forth>
  d0:	b4000007 	cbz	x7, d0 <back+0xd0>
  d4:	b4fff967 	cbz	x7, 0 <back>
  d8:	b4002c07 	cbz	x7, 658 <forth>
  dc:	b500000b 	cbnz	x11, dc <back+0xdc>
  e0:	b5fff90b 	cbnz	x11, 0 <back>
  e4:	b5002bab 	cbnz	x11, 658 <forth>
  e8:	10000013 	adr	x19, e8 <back+0xe8>
  ec:	10fff8b3 	adr	x19, 0 <back>
  f0:	10002b53 	adr	x19, 658 <forth>
  f4:	90000007 	adrp	x7, 0 <back>
  f8:	3618001b 	tbz	w27, #3, f8 <back+0xf8>
  fc:	361ff83b 	tbz	w27, #3, 0 <back>
 100:	36182adb 	tbz	w27, #3, 658 <forth>
 104:	3728000f 	tbnz	w15, #5, 104 <back+0x104>
 108:	372ff7cf 	tbnz	w15, #5, 0 <back>
 10c:	37282a6f 	tbnz	w15, #5, 658 <forth>
 110:	12a86f65 	movn	w5, #0x437b, lsl #16
 114:	52838950 	movz	w16, #0x1c4a
 118:	7288fb71 	movk	w17, #0x47db
 11c:	92ce7569 	movn	x9, #0x73ab, lsl #32
 120:	d2adf51b 	movz	x27, #0x6fa8, lsl #16
 124:	f2cb71b4 	movk	x20, #0x5b8d, lsl #32
 128:	934a75a3 	sbfx	x3, x13, #10, #20
 12c:	33066334 	bfxil	w20, w25, #6, #19
 130:	53014b29 	ubfx	w9, w25, #1, #18
 134:	93586e06 	sbfx	x6, x16, #24, #4
 138:	b35e1661 	bfi	x1, x19, #34, #6
 13c:	d35447a5 	ubfiz	x5, x29, #44, #18
 140:	13862d20 	extr	w0, w9, w6, #11
 144:	93c8d6fc 	extr	x28, x23, x8, #53
 148:	54000000 	b.eq	148 <back+0x148>
 14c:	54fff5a0 	b.eq	0 <back>
 150:	54002840 	b.eq	658 <forth>
 154:	54000001 	b.ne	154 <back+0x154>
 158:	54fff541 	b.ne	0 <back>
 15c:	540027e1 	b.ne	658 <forth>
 160:	54000002 	b.cs	160 <back+0x160>
 164:	54fff4e2 	b.cs	0 <back>
 168:	54002782 	b.cs	658 <forth>
 16c:	54000002 	b.cs	16c <back+0x16c>
 170:	54fff482 	b.cs	0 <back>
 174:	54002722 	b.cs	658 <forth>
 178:	54000003 	b.cc	178 <back+0x178>
 17c:	54fff423 	b.cc	0 <back>
 180:	540026c3 	b.cc	658 <forth>
 184:	54000003 	b.cc	184 <back+0x184>
 188:	54fff3c3 	b.cc	0 <back>
 18c:	54002663 	b.cc	658 <forth>
 190:	54000004 	b.mi	190 <back+0x190>
 194:	54fff364 	b.mi	0 <back>
 198:	54002604 	b.mi	658 <forth>
 19c:	54000005 	b.pl	19c <back+0x19c>
 1a0:	54fff305 	b.pl	0 <back>
 1a4:	540025a5 	b.pl	658 <forth>
 1a8:	54000006 	b.vs	1a8 <back+0x1a8>
 1ac:	54fff2a6 	b.vs	0 <back>
 1b0:	54002546 	b.vs	658 <forth>
 1b4:	54000007 	b.vc	1b4 <back+0x1b4>
 1b8:	54fff247 	b.vc	0 <back>
 1bc:	540024e7 	b.vc	658 <forth>
 1c0:	54000008 	b.hi	1c0 <back+0x1c0>
 1c4:	54fff1e8 	b.hi	0 <back>
 1c8:	54002488 	b.hi	658 <forth>
 1cc:	54000009 	b.ls	1cc <back+0x1cc>
 1d0:	54fff189 	b.ls	0 <back>
 1d4:	54002429 	b.ls	658 <forth>
 1d8:	5400000a 	b.ge	1d8 <back+0x1d8>
 1dc:	54fff12a 	b.ge	0 <back>
 1e0:	540023ca 	b.ge	658 <forth>
 1e4:	5400000b 	b.lt	1e4 <back+0x1e4>
 1e8:	54fff0cb 	b.lt	0 <back>
 1ec:	5400236b 	b.lt	658 <forth>
 1f0:	5400000c 	b.gt	1f0 <back+0x1f0>
 1f4:	54fff06c 	b.gt	0 <back>
 1f8:	5400230c 	b.gt	658 <forth>
 1fc:	5400000d 	b.le	1fc <back+0x1fc>
 200:	54fff00d 	b.le	0 <back>
 204:	540022ad 	b.le	658 <forth>
 208:	5400000e 	b.al	208 <back+0x208>
 20c:	54ffefae 	b.al	0 <back>
 210:	5400224e 	b.al	658 <forth>
 214:	5400000f 	b.nv	214 <back+0x214>
 218:	54ffef4f 	b.nv	0 <back>
 21c:	540021ef 	b.nv	658 <forth>
 220:	d403b401 	svc	#0x1da0
 224:	d40bf102 	hvc	#0x5f88
 228:	d4081e63 	smc	#0x40f3
 22c:	d42bf3a0 	brk	#0x5f9d
 230:	d44a73e0 	hlt	#0x539f
 234:	d503201f 	nop
 238:	d69f03e0 	eret
 23c:	d6bf03e0 	drps
 240:	d5033fdf 	isb
 244:	d503319f 	dsb	oshld
 248:	d5033fbf 	dmb	sy
 24c:	d61f0040 	br	x2
 250:	d63f01c0 	blr	x14
 254:	c8187efa 	stxr	w24, x26, [x23]
 258:	c80afedd 	stlxr	w10, x29, [x22]
 25c:	c85f7c51 	ldxr	x17, [x2]
 260:	c85ffd71 	ldaxr	x17, [x11]
 264:	c89ffd19 	stlr	x25, [x8]
 268:	c8dffd8d 	ldar	x13, [x12]
 26c:	880b7ef7 	stxr	w11, w23, [x23]
 270:	8816fc95 	stlxr	w22, w21, [x4]
 274:	885f7fa8 	ldxr	w8, [x29]
 278:	885ffeca 	ldaxr	w10, [x22]
 27c:	889ffee9 	stlr	w9, [x23]
 280:	88dffe58 	ldar	w24, [x18]
 284:	48117c65 	stxrh	w17, w5, [x3]
 288:	4813fe07 	stlxrh	w19, w7, [x16]
 28c:	485f7e00 	ldxrh	w0, [x16]
 290:	485ffc2e 	ldaxrh	w14, [x1]
 294:	489ffd52 	stlrh	w18, [x10]
 298:	48dffd89 	ldarh	w9, [x12]
 29c:	08167ceb 	stxrb	w22, w11, [x7]
 2a0:	080cfe26 	stlxrb	w12, w6, [x17]
 2a4:	085f7c0c 	ldxrb	w12, [x0]
 2a8:	085ffe8e 	ldaxrb	w14, [x20]
 2ac:	089ffe87 	stlrb	w7, [x20]
 2b0:	08dffe33 	ldarb	w19, [x17]
 2b4:	c87f5ac4 	ldxp	x4, x22, [x22]
 2b8:	c87f973a 	ldaxp	x26, x5, [x25]
 2bc:	c8223183 	stxp	w2, x3, x12, [x12]
 2c0:	c83be30a 	stlxp	w27, x10, x24, [x24]
 2c4:	887f0a4b 	ldxp	w11, w2, [x18]
 2c8:	887fab75 	ldaxp	w21, w10, [x27]
 2cc:	8831602c 	stxp	w17, w12, w24, [x1]
 2d0:	882fc66e 	stlxp	w15, w14, w17, [x19]
 2d4:	f81612c7 	str	x7, [x22,#-159]
 2d8:	b819b254 	str	w20, [x18,#-101]
 2dc:	381f32ef 	strb	w15, [x23,#-13]
 2e0:	781d23a6 	strh	w6, [x29,#-46]
 2e4:	f842f28d 	ldr	x13, [x20,#47]
 2e8:	b85e1397 	ldr	w23, [x28,#-31]
 2ec:	385f1132 	ldrb	w18, [x9,#-15]
 2f0:	79400db4 	ldrh	w20, [x13,#6]
 2f4:	39802e73 	ldrsb	x19, [x19,#11]
 2f8:	7881904c 	ldrsh	x12, [x2,#25]
 2fc:	78de012e 	ldrsh	w14, [x9,#-32]
 300:	b89ec310 	ldrsw	x16, [x24,#-20]
 304:	fc51f27d 	ldr	d29, [x19,#-225]
 308:	bc423359 	ldr	s25, [x26,#35]
 30c:	fc1b72b6 	str	d22, [x21,#-73]
 310:	bc184314 	str	s20, [x24,#-124]
 314:	f81adcb4 	str	x20, [x5,#-83]!
 318:	b8182e3a 	str	w26, [x17,#-126]!
 31c:	381fbe9c 	strb	w28, [x20,#-5]!
 320:	781e9df7 	strh	w23, [x15,#-23]!
 324:	f855cc06 	ldr	x6, [x0,#-164]!
 328:	b8421e03 	ldr	w3, [x16,#33]!
 32c:	385e8fc3 	ldrb	w3, [x30,#-24]!
 330:	785cce8b 	ldrh	w11, [x20,#-52]!
 334:	389efd29 	ldrsb	x9, [x9,#-17]!
 338:	789e2e38 	ldrsh	x24, [x17,#-30]!
 33c:	78dfbdd5 	ldrsh	w21, [x14,#-5]!
 340:	b8808c73 	ldrsw	x19, [x3,#8]!
 344:	fc500db5 	ldr	d21, [x13,#-256]!
 348:	bc5dad07 	ldr	s7, [x8,#-38]!
 34c:	fc078de9 	str	d9, [x15,#120]!
 350:	bc02de29 	str	s9, [x17,#45]!
 354:	f8037790 	str	x16, [x28],#55
 358:	b81bd42f 	str	w15, [x1],#-67
 35c:	381f179e 	strb	w30, [x28],#-15
 360:	781d14e0 	strh	w0, [x7],#-47
 364:	f850a775 	ldr	x21, [x27],#-246
 368:	b84004a9 	ldr	w9, [x5],#0
 36c:	3840f52d 	ldrb	w13, [x9],#15
 370:	785ea68f 	ldrh	w15, [x20],#-22
 374:	389ec480 	ldrsb	x0, [x4],#-20
 378:	7880c526 	ldrsh	x6, [x9],#12
 37c:	78c16527 	ldrsh	w7, [x9],#22
 380:	b89aa4d6 	ldrsw	x22, [x6],#-86
 384:	fc5c052e 	ldr	d14, [x9],#-64
 388:	bc5be667 	ldr	s7, [x19],#-66
 38c:	fc117418 	str	d24, [x0],#-233
 390:	bc001701 	str	s1, [x24],#1
 394:	f8346bc2 	str	x2, [x30,x20]
 398:	b832d8ae 	str	w14, [x5,w18,sxtw #2]
 39c:	383adb36 	strb	w22, [x25,w26,sxtw #0]
 3a0:	782fea3e 	strh	w30, [x17,x15,sxtx]
 3a4:	f863e90c 	ldr	x12, [x8,x3,sxtx]
 3a8:	b862e86b 	ldr	w11, [x3,x2,sxtx]
 3ac:	3868da9c 	ldrb	w28, [x20,w8,sxtw #0]
 3b0:	787e5b8e 	ldrh	w14, [x28,w30,uxtw #1]
 3b4:	38a658d9 	ldrsb	x25, [x6,w6,uxtw #0]
 3b8:	78a3da4c 	ldrsh	x12, [x18,w3,sxtw #1]
 3bc:	78edd9f6 	ldrsh	w22, [x15,w13,sxtw #1]
 3c0:	b8a4eb99 	ldrsw	x25, [x28,x4,sxtx]
 3c4:	fc686842 	ldr	d2, [x2,x8]
 3c8:	bc67cbbb 	ldr	s27, [x29,w7,sxtw]
 3cc:	fc21d88f 	str	d15, [x4,w1,sxtw #3]
 3d0:	bc216afb 	str	s27, [x23,x1]
 3d4:	f91fac7a 	str	x26, [x3,#16216]
 3d8:	b9180ab0 	str	w16, [x21,#6152]
 3dc:	391d1a52 	strb	w18, [x18,#1862]
 3e0:	791b9e0f 	strh	w15, [x16,#3534]
 3e4:	f958bb03 	ldr	x3, [x24,#12656]
 3e8:	b959124d 	ldr	w13, [x18,#6416]
 3ec:	395a2f0c 	ldrb	w12, [x24,#1675]
 3f0:	795feca5 	ldrh	w5, [x5,#4086]
 3f4:	399cd112 	ldrsb	x18, [x8,#1844]
 3f8:	7998a34f 	ldrsh	x15, [x26,#3152]
 3fc:	79ddc31a 	ldrsh	w26, [x24,#3808]
 400:	b999e170 	ldrsw	x16, [x11,#6624]
 404:	fd5a6dea 	ldr	d10, [x15,#13528]
 408:	bd5fefd8 	ldr	s24, [x30,#8172]
 40c:	fd1a03ac 	str	d12, [x29,#13312]
 410:	bd1daf20 	str	s0, [x25,#7596]
 414:	58ffdf7d 	ldr	x29, 0 <back>
 418:	18000010 	ldr	w16, 418 <back+0x418>
 41c:	f8837260 	prfm	pldl1keep, [x19,#55]
 420:	d80011c0 	prfm	pldl1keep, 658 <forth>
 424:	f8bb5840 	prfm	pldl1keep, [x2,w27,uxtw #3]
 428:	f99d25c0 	prfm	pldl1keep, [x14,#14920]
 42c:	1a15039b 	adc	w27, w28, w21
 430:	3a1b0065 	adcs	w5, w3, w27
 434:	5a0b019d 	sbc	w29, w12, w11
 438:	7a1002ac 	sbcs	w12, w21, w16
 43c:	9a160321 	adc	x1, x25, x22
 440:	ba04026a 	adcs	x10, x19, x4
 444:	da10004d 	sbc	x13, x2, x16
 448:	fa120243 	sbcs	x3, x18, x18
 44c:	0b3daec8 	add	w8, w22, w29, sxth #3
 450:	2b20a871 	adds	w17, w3, w0, sxth #2
 454:	cb25ab4d 	sub	x13, x26, w5, sxth #2
 458:	6b3053cd 	subs	w13, w30, w16, uxtw #4
 45c:	8b220cc9 	add	x9, x6, w2, uxtb #3
 460:	ab2b0e34 	adds	x20, x17, w11, uxtb #3
 464:	cb300e71 	sub	x17, x19, w16, uxtb #3
 468:	eb38b2d5 	subs	x21, x22, w24, sxth #4
 46c:	3a59a30b 	ccmn	w24, w25, #0xb, ge
 470:	7a40312e 	ccmp	w9, w0, #0xe, cc
 474:	ba5b51c7 	ccmn	x14, x27, #0x7, pl
 478:	fa5ad025 	ccmp	x1, x26, #0x5, le
 47c:	3a460b62 	ccmn	w27, #0x6, #0x2, eq
 480:	7a572ae5 	ccmp	w23, #0x17, #0x5, cs
 484:	ba4bca08 	ccmn	x16, #0xb, #0x8, gt
 488:	fa4bba8e 	ccmp	x20, #0xb, #0xe, lt
 48c:	1a89226e 	csel	w14, w19, w9, cs
 490:	1a8dd72a 	csinc	w10, w25, w13, le
 494:	5a9a9301 	csinv	w1, w24, w26, ls
 498:	5a8637a4 	csneg	w4, w29, w6, cc
 49c:	9a886312 	csel	x18, x24, x8, vs
 4a0:	9a877721 	csinc	x1, x25, x7, vc
 4a4:	da9422cd 	csinv	x13, x22, x20, cs
 4a8:	da899426 	csneg	x6, x1, x9, ls
 4ac:	5ac00285 	rbit	w5, w20
 4b0:	5ac00611 	rev16	w17, w16
 4b4:	5ac00a47 	rev	w7, w18
 4b8:	5ac0108a 	clz	w10, w4
 4bc:	5ac014ab 	cls	w11, w5
 4c0:	dac00218 	rbit	x24, x16
 4c4:	dac0051c 	rev16	x28, x8
 4c8:	dac0092c 	rev32	x12, x9
 4cc:	dac00d8a 	rev	x10, x12
 4d0:	dac0126d 	clz	x13, x19
 4d4:	dac01450 	cls	x16, x2
 4d8:	1ad60b8f 	udiv	w15, w28, w22
 4dc:	1acb0f5b 	sdiv	w27, w26, w11
 4e0:	1ac921da 	lsl	w26, w14, w9
 4e4:	1ac22672 	lsr	w18, w19, w2
 4e8:	1ac92b76 	asr	w22, w27, w9
 4ec:	1ad22f88 	ror	w8, w28, w18
 4f0:	9aca0a4f 	udiv	x15, x18, x10
 4f4:	9ad10f6d 	sdiv	x13, x27, x17
 4f8:	9adc22d1 	lsl	x17, x22, x28
 4fc:	9ade25e9 	lsr	x9, x15, x30
 500:	9aca2b74 	asr	x20, x27, x10
 504:	9ac92fbe 	ror	x30, x29, x9
 508:	1b0e764d 	madd	w13, w18, w14, w29
 50c:	1b158b65 	msub	w5, w27, w21, w2
 510:	9b1e4e7e 	madd	x30, x19, x30, x19
 514:	9b09879a 	msub	x26, x28, x9, x1
 518:	9b2b1788 	smaddl	x8, w28, w11, x5
 51c:	9b3daa70 	smsubl	x16, w19, w29, x10
 520:	9baf6c56 	umaddl	x22, w2, w15, x27
 524:	9ba48968 	umsubl	x8, w11, w4, x2
 528:	1e250bc7 	fmul	s7, s30, s5
 52c:	1e241b1d 	fdiv	s29, s24, s4
 530:	1e362a99 	fadd	s25, s20, s22
 534:	1e3b3ac0 	fsub	s0, s22, s27
 538:	1e250a3d 	fmul	s29, s17, s5
 53c:	1e6909a7 	fmul	d7, d13, d9
 540:	1e711a4f 	fdiv	d15, d18, d17
 544:	1e7b2a8c 	fadd	d12, d20, d27
 548:	1e7739a8 	fsub	d8, d13, d23
 54c:	1e680882 	fmul	d2, d4, d8
 550:	1f051bd6 	fmadd	s22, s30, s5, s6
 554:	1f0e9812 	fmsub	s18, s0, s14, s6
 558:	1f383c6d 	fnmadd	s13, s3, s24, s15
 55c:	1f3c52c4 	fnmadd	s4, s22, s28, s20
 560:	1f420924 	fmadd	d4, d9, d2, d2
 564:	1f56bfb2 	fmsub	d18, d29, d22, d15
 568:	1f615f40 	fnmadd	d0, d26, d1, d23
 56c:	1f703cd8 	fnmadd	d24, d6, d16, d15
 570:	1e2040d1 	fmov	s17, s6
 574:	1e20c282 	fabs	s2, s20
 578:	1e2140aa 	fneg	s10, s5
 57c:	1e21c2d7 	fsqrt	s23, s22
 580:	1e22c095 	fcvt	d21, s4
 584:	1e6041f1 	fmov	d17, d15
 588:	1e60c220 	fabs	d0, d17
 58c:	1e6140c7 	fneg	d7, d6
 590:	1e61c124 	fsqrt	d4, d9
 594:	1e624001 	fcvt	s1, d0
 598:	1e3802d0 	fcvtzs	w16, s22
 59c:	9e38006d 	fcvtzs	x13, s3
 5a0:	1e78024f 	fcvtzs	w15, d18
 5a4:	9e7800ed 	fcvtzs	x13, d7
 5a8:	1e22029e 	scvtf	s30, w20
 5ac:	9e2200e0 	scvtf	s0, x7
 5b0:	1e620286 	scvtf	d6, w20
 5b4:	9e62018b 	scvtf	d11, x12
 5b8:	1e2601b6 	fmov	w22, s13
 5bc:	9e66019d 	fmov	x29, d12
 5c0:	1e270131 	fmov	s17, w9
 5c4:	9e670066 	fmov	d6, x3
 5c8:	1e3322c0 	fcmp	s22, s19
 5cc:	1e602220 	fcmp	d17, d0
 5d0:	1e202208 	fcmp	s16, #0.0
 5d4:	1e6021a8 	fcmp	d13, #0.0
 5d8:	1e601000 	fmov	d0, #2.000000000000000000e+00
 5dc:	1e603000 	fmov	d0, #2.125000000000000000e+00
 5e0:	1e621000 	fmov	d0, #4.000000000000000000e+00
 5e4:	1e623000 	fmov	d0, #4.250000000000000000e+00
 5e8:	1e641000 	fmov	d0, #8.000000000000000000e+00
 5ec:	1e643000 	fmov	d0, #8.500000000000000000e+00
 5f0:	1e661000 	fmov	d0, #1.600000000000000000e+01
 5f4:	1e663000 	fmov	d0, #1.700000000000000000e+01
 5f8:	1e681000 	fmov	d0, #1.250000000000000000e-01
 5fc:	1e683000 	fmov	d0, #1.328125000000000000e-01
 600:	1e6a1000 	fmov	d0, #2.500000000000000000e-01
 604:	1e6a3000 	fmov	d0, #2.656250000000000000e-01
 608:	1e6c1000 	fmov	d0, #5.000000000000000000e-01
 60c:	1e6c3000 	fmov	d0, #5.312500000000000000e-01
 610:	1e6e1000 	fmov	d0, #1.000000000000000000e+00
 614:	1e6e3000 	fmov	d0, #1.062500000000000000e+00
 618:	1e701000 	fmov	d0, #-2.000000000000000000e+00
 61c:	1e703000 	fmov	d0, #-2.125000000000000000e+00
 620:	1e721000 	fmov	d0, #-4.000000000000000000e+00
 624:	1e723000 	fmov	d0, #-4.250000000000000000e+00
 628:	1e741000 	fmov	d0, #-8.000000000000000000e+00
 62c:	1e743000 	fmov	d0, #-8.500000000000000000e+00
 630:	1e761000 	fmov	d0, #-1.600000000000000000e+01
 634:	1e763000 	fmov	d0, #-1.700000000000000000e+01
 638:	1e781000 	fmov	d0, #-1.250000000000000000e-01
 63c:	1e783000 	fmov	d0, #-1.328125000000000000e-01
 640:	1e7a1000 	fmov	d0, #-2.500000000000000000e-01
 644:	1e7a3000 	fmov	d0, #-2.656250000000000000e-01
 648:	1e7c1000 	fmov	d0, #-5.000000000000000000e-01
 64c:	1e7c3000 	fmov	d0, #-5.312500000000000000e-01
 650:	1e7e1000 	fmov	d0, #-1.000000000000000000e+00
 654:	1e7e3000 	fmov	d0, #-1.062500000000000000e+00
 */

  static const unsigned int insns[] =
  {
    0x8b06b413,     0xcb55cd65,     0xab150765,     0xeb9b2b38,
    0x0b461d94,     0x4b997dfc,     0x2b986b8a,     0x6b875b53,
    0x8a075ba8,     0xaa93be14,     0xca19c3ab,     0xea158c6b,
    0x0a885e4b,     0x2a043d24,     0x4a156528,     0x6a803256,
    0x8a3ea106,     0xaab9b2f4,     0xcab9343a,     0xea2355d3,
    0x0a296f07,     0x2a6171d1,     0x4aaa6525,     0x6abd6430,
    0x110e4860,     0x3105fbae,     0x5108c02b,     0x71059e3e,
    0x91081e21,     0xb10f3b84,     0xd102ddbc,     0xf1076ea0,
    0x12184719,     0x32015933,     0x52066a78,     0x7203914a,
    0x92557c42,     0xb265138b,     0xd2061f11,     0xf260e8f9,
    0x14000000,     0x17ffffd7,     0x1400016c,     0x94000000,
    0x97ffffd4,     0x94000169,     0x34000006,     0x34fffa26,
    0x34002cc6,     0x35000001,     0x35fff9c1,     0x35002c61,
    0xb4000007,     0xb4fff967,     0xb4002c07,     0xb500000b,
    0xb5fff90b,     0xb5002bab,     0x10000013,     0x10fff8b3,
    0x10002b53,     0x90000007,     0x3618001b,     0x361ff83b,
    0x36182adb,     0x3728000f,     0x372ff7cf,     0x37282a6f,
    0x12a86f65,     0x52838950,     0x7288fb71,     0x92ce7569,
    0xd2adf51b,     0xf2cb71b4,     0x934a75a3,     0x33066334,
    0x53014b29,     0x93586e06,     0xb35e1661,     0xd35447a5,
    0x13862d20,     0x93c8d6fc,     0x54000000,     0x54fff5a0,
    0x54002840,     0x54000001,     0x54fff541,     0x540027e1,
    0x54000002,     0x54fff4e2,     0x54002782,     0x54000002,
    0x54fff482,     0x54002722,     0x54000003,     0x54fff423,
    0x540026c3,     0x54000003,     0x54fff3c3,     0x54002663,
    0x54000004,     0x54fff364,     0x54002604,     0x54000005,
    0x54fff305,     0x540025a5,     0x54000006,     0x54fff2a6,
    0x54002546,     0x54000007,     0x54fff247,     0x540024e7,
    0x54000008,     0x54fff1e8,     0x54002488,     0x54000009,
    0x54fff189,     0x54002429,     0x5400000a,     0x54fff12a,
    0x540023ca,     0x5400000b,     0x54fff0cb,     0x5400236b,
    0x5400000c,     0x54fff06c,     0x5400230c,     0x5400000d,
    0x54fff00d,     0x540022ad,     0x5400000e,     0x54ffefae,
    0x5400224e,     0x5400000f,     0x54ffef4f,     0x540021ef,
    0xd403b401,     0xd40bf102,     0xd4081e63,     0xd42bf3a0,
    0xd44a73e0,     0xd503201f,     0xd69f03e0,     0xd6bf03e0,
    0xd5033fdf,     0xd503319f,     0xd5033fbf,     0xd61f0040,
    0xd63f01c0,     0xc8187efa,     0xc80afedd,     0xc85f7c51,
    0xc85ffd71,     0xc89ffd19,     0xc8dffd8d,     0x880b7ef7,
    0x8816fc95,     0x885f7fa8,     0x885ffeca,     0x889ffee9,
    0x88dffe58,     0x48117c65,     0x4813fe07,     0x485f7e00,
    0x485ffc2e,     0x489ffd52,     0x48dffd89,     0x08167ceb,
    0x080cfe26,     0x085f7c0c,     0x085ffe8e,     0x089ffe87,
    0x08dffe33,     0xc87f5ac4,     0xc87f973a,     0xc8223183,
    0xc83be30a,     0x887f0a4b,     0x887fab75,     0x8831602c,
    0x882fc66e,     0xf81612c7,     0xb819b254,     0x381f32ef,
    0x781d23a6,     0xf842f28d,     0xb85e1397,     0x385f1132,
    0x79400db4,     0x39802e73,     0x7881904c,     0x78de012e,
    0xb89ec310,     0xfc51f27d,     0xbc423359,     0xfc1b72b6,
    0xbc184314,     0xf81adcb4,     0xb8182e3a,     0x381fbe9c,
    0x781e9df7,     0xf855cc06,     0xb8421e03,     0x385e8fc3,
    0x785cce8b,     0x389efd29,     0x789e2e38,     0x78dfbdd5,
    0xb8808c73,     0xfc500db5,     0xbc5dad07,     0xfc078de9,
    0xbc02de29,     0xf8037790,     0xb81bd42f,     0x381f179e,
    0x781d14e0,     0xf850a775,     0xb84004a9,     0x3840f52d,
    0x785ea68f,     0x389ec480,     0x7880c526,     0x78c16527,
    0xb89aa4d6,     0xfc5c052e,     0xbc5be667,     0xfc117418,
    0xbc001701,     0xf8346bc2,     0xb832d8ae,     0x383adb36,
    0x782fea3e,     0xf863e90c,     0xb862e86b,     0x3868da9c,
    0x787e5b8e,     0x38a658d9,     0x78a3da4c,     0x78edd9f6,
    0xb8a4eb99,     0xfc686842,     0xbc67cbbb,     0xfc21d88f,
    0xbc216afb,     0xf91fac7a,     0xb9180ab0,     0x391d1a52,
    0x791b9e0f,     0xf958bb03,     0xb959124d,     0x395a2f0c,
    0x795feca5,     0x399cd112,     0x7998a34f,     0x79ddc31a,
    0xb999e170,     0xfd5a6dea,     0xbd5fefd8,     0xfd1a03ac,
    0xbd1daf20,     0x58ffdf7d,     0x18000010,     0xf8837260,
    0xd80011c0,     0xf8bb5840,     0xf99d25c0,     0x1a15039b,
    0x3a1b0065,     0x5a0b019d,     0x7a1002ac,     0x9a160321,
    0xba04026a,     0xda10004d,     0xfa120243,     0x0b3daec8,
    0x2b20a871,     0xcb25ab4d,     0x6b3053cd,     0x8b220cc9,
    0xab2b0e34,     0xcb300e71,     0xeb38b2d5,     0x3a59a30b,
    0x7a40312e,     0xba5b51c7,     0xfa5ad025,     0x3a460b62,
    0x7a572ae5,     0xba4bca08,     0xfa4bba8e,     0x1a89226e,
    0x1a8dd72a,     0x5a9a9301,     0x5a8637a4,     0x9a886312,
    0x9a877721,     0xda9422cd,     0xda899426,     0x5ac00285,
    0x5ac00611,     0x5ac00a47,     0x5ac0108a,     0x5ac014ab,
    0xdac00218,     0xdac0051c,     0xdac0092c,     0xdac00d8a,
    0xdac0126d,     0xdac01450,     0x1ad60b8f,     0x1acb0f5b,
    0x1ac921da,     0x1ac22672,     0x1ac92b76,     0x1ad22f88,
    0x9aca0a4f,     0x9ad10f6d,     0x9adc22d1,     0x9ade25e9,
    0x9aca2b74,     0x9ac92fbe,     0x1b0e764d,     0x1b158b65,
    0x9b1e4e7e,     0x9b09879a,     0x9b2b1788,     0x9b3daa70,
    0x9baf6c56,     0x9ba48968,     0x1e250bc7,     0x1e241b1d,
    0x1e362a99,     0x1e3b3ac0,     0x1e250a3d,     0x1e6909a7,
    0x1e711a4f,     0x1e7b2a8c,     0x1e7739a8,     0x1e680882,
    0x1f051bd6,     0x1f0e9812,     0x1f383c6d,     0x1f3c52c4,
    0x1f420924,     0x1f56bfb2,     0x1f615f40,     0x1f703cd8,
    0x1e2040d1,     0x1e20c282,     0x1e2140aa,     0x1e21c2d7,
    0x1e22c095,     0x1e6041f1,     0x1e60c220,     0x1e6140c7,
    0x1e61c124,     0x1e624001,     0x1e3802d0,     0x9e38006d,
    0x1e78024f,     0x9e7800ed,     0x1e22029e,     0x9e2200e0,
    0x1e620286,     0x9e62018b,     0x1e2601b6,     0x9e66019d,
    0x1e270131,     0x9e670066,     0x1e3322c0,     0x1e602220,
    0x1e202208,     0x1e6021a8,     0x1e601000,     0x1e603000,
    0x1e621000,     0x1e623000,     0x1e641000,     0x1e643000,
    0x1e661000,     0x1e663000,     0x1e681000,     0x1e683000,
    0x1e6a1000,     0x1e6a3000,     0x1e6c1000,     0x1e6c3000,
    0x1e6e1000,     0x1e6e3000,     0x1e701000,     0x1e703000,
    0x1e721000,     0x1e723000,     0x1e741000,     0x1e743000,
    0x1e761000,     0x1e763000,     0x1e781000,     0x1e783000,
    0x1e7a1000,     0x1e7a3000,     0x1e7c1000,     0x1e7c3000,
    0x1e7e1000,     0x1e7e3000, 
  };
// END  Generated code -- do not edit

  {
    bool ok = true;
    unsigned int *insns1 = (unsigned int *)entry;
    for (unsigned int i = 0; i < sizeof insns / sizeof insns[0]; i++) {
      if (insns[i] != insns1[i]) {
	ok = false;
	printf("Ours:\n");
	Disassembler::decode((address)&insns1[i], (address)&insns1[i+1]);
	printf("Theirs:\n");
	Disassembler::decode((address)&insns[i], (address)&insns[i+1]);
	printf("\n");
      }
    }
    assert(ok, "Assembler smoke test failed");
  }
#endif // ASSERT

#ifdef PRODUCT
#define BLOCK_COMMENT(str) /* nothing */
#else
#define BLOCK_COMMENT(str) __ block_comment(str)
#endif

#define BIND(label) bind(label); BLOCK_COMMENT(#label ":")

  {
    Label l, loop, empty;
    address a = __ pc();
    __ adr(r3, l);
    __ adrp(r4, l);
    __ bl(empty);
    __ movz(r0, 0);
    __ BIND(loop);
    __ subs(r0, r0, 10);
    __ br(Assembler::NE, l);
    __ add(r0, r0, 1u);
    __ adr(r3, loop);
    __ br(Assembler::AL, loop);
    __ BIND(l);
    __ BIND(empty);
    __ ret(lr);
    printf("\n");
  }

  // Test LEA
  __ lea(r0, Address(sp, 120));
  __ lea(r0, Address(sp, -120));
  __ lea(r1, Address(sp, r1, Address::lsl(3)));
  __ lea(r1, Address(sp, r2, Address::sxtw(3)));
}

#undef __

extern "C" {
  void das(uint64_t start, int len) {
    len <<= 2;
    if (len < 0)
      Disassembler::decode((address)start + len, (address)start);
    else
      Disassembler::decode((address)start, (address)start + len);
  }

  JNIEXPORT void das1(unsigned long insn) {
    das(insn, 1);
  }
}

#define gas_assert(ARG1) assert(ARG1, #ARG1)

void Address::lea(MacroAssembler *as, Register r) const {
#define __ as->
  switch(_mode) {
  case base_plus_offset: {
    if (_offset > 0)
      __ add(r, _base, _offset);
    else
      __ sub(r, _base, -_offset);
      break;
  }
  case base_plus_offset_reg: {
    __ add(r, _base, _index, _ext.op(), MAX(_ext.shift(), 0) );
    break;
  }
  case literal: {
    __ mov(r, target());
    break;
  }
  default:
    ShouldNotReachHere();
  }
#undef __
}

// ------------- Stolen from binutils begin -------------------------------------

/* Build the accepted values for immediate logical SIMD instructions.
 *
 * The valid encodings of the immediate value are:
 *   opc<0> j:jjjjj  i:iii:ii  SIMD size  R             S
 *   1      ssssss   rrrrrr       64      UInt(rrrrrr)  UInt(ssssss)
 *   0      0sssss   0rrrrr       32      UInt(rrrrr)   UInt(sssss)
 *   0      10ssss   00rrrr       16      UInt(rrrr)    UInt(ssss)
 *   0      110sss   000rrr       8       UInt(rrr)     UInt(sss)
 *   0      1110ss   0000rr       4       UInt(rr)      UInt(ss)
 *   0      11110s   00000r       2       UInt(r)       UInt(s)
 *   other combinations                   UNPREDICTABLE
 *
 * Let's call E the SIMD size.
 *
 * The immediate value is: S+1 bits '1' rotated to the right by R.
 *
 * The total of valid encodings is 64^2 + 32^2 + ... + 2^2 = 5460.
 *
 * This means we have the following number of distinct values:
 *   - for S = E - 1, all values of R generate a word full of '1'
 *      so we have 2 + 4 + ... + 64 = 126 ways of encoding 0xf...f
 *   - for S != E - 1, all value are obviously distinct
 *      so we have #{ for all E: (E - 1) * R (where R = E) } values
 *        = 64*63 + 32*31 + ... + 2*1 = 5334
 *   - it is obvious that for two different values of E, if S != E - 1
 *      then we can't generate the same value.
 * So the total number of distinct values is 5334 + 1 = 5335 (out of
 * a total of 5460 valid encodings).
 */
#define TOTAL_IMM_NB  5334

typedef struct {
  uint64_t imm;
  uint32_t encoding;
} simd_imm_encoding_v2;

static simd_imm_encoding_v2 simd_immediates_v2[TOTAL_IMM_NB];

static int
simd_imm_encoding_cmp_v2(const void *i1, const void *i2)
{
  const simd_imm_encoding_v2 *imm1 = (const simd_imm_encoding_v2 *)i1;
  const simd_imm_encoding_v2 *imm2 = (const simd_imm_encoding_v2 *)i2;

  if (imm1->imm < imm2->imm)
    return -1;
  if (imm1->imm > imm2->imm)
    return +1;
  return 0;
}

/* immediate bitfield encoding
 * imm13<12> imm13<5:0> imm13<11:6> SIMD size R      S
 * 1         ssssss     rrrrrr      64        rrrrrr ssssss
 * 0         0sssss     0rrrrr      32        rrrrr  sssss
 * 0         10ssss     00rrrr      16        rrrr   ssss
 * 0         110sss     000rrr      8         rrr    sss
 * 0         1110ss     0000rr      4         rr     ss
 * 0         11110s     00000r      2         r      s
 */
static inline int encode_immediate_bitfield(int is64, uint32_t s, uint32_t r)
{
  return (is64 << 12) | (r << 6) | s;
}

static void
build_immediate_table_v2(void) __attribute__ ((constructor));

static void
build_immediate_table_v2(void)
{
  uint32_t log_e, e, s, r, s_mask;
  uint64_t mask, imm;
  int nb_imms;
  int is64;

  nb_imms = 0;
  for (log_e = 1; log_e <= 6; log_e++) {
    e = 1u << log_e;
    if (log_e == 6) {
      is64 = 1;
      mask = 0xffffffffffffffffull;
      s_mask = 0;
    } else {
      is64 = 0;
      mask = (1ull << e) - 1;
      /* log_e  s_mask
       *  1     ((1 << 4) - 1) << 2 = 111100
       *  2     ((1 << 3) - 1) << 3 = 111000
       *  3     ((1 << 2) - 1) << 4 = 110000
       *  4     ((1 << 1) - 1) << 5 = 100000
       *  5     ((1 << 0) - 1) << 6 = 000000
       */
      s_mask = ((1u << (5 - log_e)) - 1) << (log_e + 1);
    }
    for (s = 0; s < e - 1; s++) {
      for (r = 0; r < e; r++) {
        /* s+1 consecutive bits to 1 (s < 63) */
        imm = (1ull << (s + 1)) - 1;
        /* rotate right by r */
        if (r != 0)
          imm = (imm >> r) | ((imm << (e - r)) & mask);
        /* replicate the constant depending on SIMD size */
        switch (log_e) {
        case 1: imm = (imm <<  2) | imm;
        case 2: imm = (imm <<  4) | imm;
        case 3: imm = (imm <<  8) | imm;
        case 4: imm = (imm << 16) | imm;
        case 5: imm = (imm << 32) | imm;
        case 6:
          break;
        default:
          abort ();
        }
        simd_immediates_v2[nb_imms].imm = imm;
        simd_immediates_v2[nb_imms].encoding =
          encode_immediate_bitfield(is64, s | s_mask, r);
        nb_imms++;
      }
    }
  }
  gas_assert(nb_imms == TOTAL_IMM_NB);
  qsort(simd_immediates_v2, nb_imms,
        sizeof(simd_immediates_v2[0]), simd_imm_encoding_cmp_v2);
}

/* Create a valid encoding for imm.  Returns ffffffff since it's an invalid
   encoding.  */
uint32_t
asm_util::encode_immediate_v2(int is32, uint64_t imm)
{
  simd_imm_encoding_v2 imm_enc;
  const simd_imm_encoding_v2 *imm_encoding;

  if (is32) {
    /* Allow all zeros or all ones in top 32-bits, so that
       constant expressions like ~1 are permitted. */
    if (imm >> 32 != 0 && imm >> 32 != 0xffffffff)
      return 0xffffffff;
    /* Replicate the 32 lower bits to the 32 upper bits.  */
    imm &= 0xffffffff;
    imm |= imm << 32;
  }

  imm_enc.imm = imm;
  imm_encoding = (const simd_imm_encoding_v2 *)
    bsearch(&imm_enc, simd_immediates_v2, TOTAL_IMM_NB,
            sizeof(simd_immediates_v2[0]), simd_imm_encoding_cmp_v2);
  if (imm_encoding == NULL)
    return 0xffffffff;
  return imm_encoding->encoding;
}

static uint32_t encode_v2_imm_float_bits(uint32_t imm)
{
  return
    ((imm >> 19) & 0x7f)          /* b[25:19] -> b[6:0] */
    | ((imm >> (31 - 7)) & 0x80); /* b[31]    -> b[7]   */
}

static uint64_t
expand_fp_imm(int is_dp, uint32_t imm8)
{
  uint64_t imm;
  uint32_t imm8_7, imm8_6_0, imm8_6, imm8_6_repl4;

  imm8_7 = (imm8 >> 7) & 0x01;   /* imm8<7>   */
  imm8_6_0 = imm8 & 0x7f; /* imm8<6:0> */
  imm8_6 = imm8_6_0 >> 6;         /* imm8<6>   */
  imm8_6_repl4 = (imm8_6 << 3) | (imm8_6 << 2)
    | (imm8_6 << 1) | imm8_6;     /* Replicate(imm8<6>,4) */
  if (is_dp) {
    imm = (imm8_7 << (63-32))                           /* imm8<7>              */
      | ((imm8_6 ^ 1) << (62-32))                       /* NOT(imm8<6>)         */
      | (imm8_6_repl4 << (58-32)) | (imm8_6 << (57-32))
      | (imm8_6 << (56-32)) | (imm8_6 << (55-32))       /* Replicate(imm8<6>,7) */
      | (imm8_6_0 << (48-32));                          /* imm8<6>:imm8<5:0>    */
    imm <<= 32;
  } else {
    imm = (imm8_7 << 31)     /* imm8<7>              */
      | ((imm8_6 ^ 1) << 30) /* NOT(imm8<6>)         */
      | (imm8_6_repl4 << 26) /* Replicate(imm8<6>,4) */
      | (imm8_6_0 << 19);    /* imm8<6>:imm8<5:0>    */
  }

  return imm;
}

// ------------- Stolen from binutils end -------------------------------------


Address::Address(address target, relocInfo::relocType rtype) : _mode(literal){
  _is_lval = false;
  _target = target;
  switch (rtype) {
  case relocInfo::oop_type:
    // Oops are a special case. Normally they would be their own section
    // but in cases like icBuffer they are literals in the code stream that
    // we don't have a section for. We use none so that we get a literal address
    // which is always patchable.
    break;
  case relocInfo::external_word_type:
    _rspec = external_word_Relocation::spec(target);
    break;
  case relocInfo::internal_word_type:
    _rspec = internal_word_Relocation::spec(target);
    break;
  case relocInfo::opt_virtual_call_type:
    _rspec = opt_virtual_call_Relocation::spec();
    break;
  case relocInfo::static_call_type:
    _rspec = static_call_Relocation::spec();
    break;
  case relocInfo::runtime_call_type:
    _rspec = runtime_call_Relocation::spec();
    break;
  case relocInfo::poll_type:
  case relocInfo::poll_return_type:
    _rspec = Relocation::spec_simple(rtype);
    break;
  case relocInfo::none:
    break;
  default:
    ShouldNotReachHere();
    break;
  }
}

void Assembler::br(Condition cc, Label &L) {
  if (L.is_bound()) {
    br(cc, target(L));
  } else {
    InstructionMark im(this);
    L.add_patch_at(code(), locator());
    br(cc, pc());
  }
}

void Assembler::wrap_label(Label &L,
				 Assembler::uncond_branch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(target(L));
  } else {
    InstructionMark im(this);
    L.add_patch_at(code(), locator());
    (this->*insn)(pc());
  }
}

void Assembler::wrap_label(Register r, Label &L,
				 compare_and_branch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(r, target(L));
  } else {
    InstructionMark im(this);
    L.add_patch_at(code(), locator());
    (this->*insn)(r, pc());
  }
}

void Assembler::wrap_label(Register r, int bitpos, Label &L,
				 test_and_branch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(r, bitpos, target(L));
  } else {
    InstructionMark im(this);
    L.add_patch_at(code(), locator());
    (this->*insn)(r, bitpos, pc());
  }
}

void Assembler::wrap_label(Label &L, int prfop, prefetch_insn insn) {
  if (L.is_bound()) {
    (this->*insn)(target(L), prfop);
  } else {
    InstructionMark im(this);
    L.add_patch_at(code(), locator());
    (this->*insn)(pc(), prfop);
  }
}

void MacroAssembler::pd_patch_instruction(address branch, address target) {
  long offset = (target - branch) >> 2;
  unsigned insn = *(unsigned*)branch;
  if ((Instruction_aarch64::extract(insn, 29, 24) & 0b111011) == 0b011000) {
    // Load register (literal)
    Instruction_aarch64::spatch(branch, 23, 5, offset);
  } else if (Instruction_aarch64::extract(insn, 30, 26) == 0b00101) {
    // Unconditional branch (immediate)
    Instruction_aarch64::spatch(branch, 25, 0, offset);
  } else if (Instruction_aarch64::extract(insn, 31, 25) == 0b0101010) {
    // Conditional branch (immediate)
    Instruction_aarch64::spatch(branch, 23, 5, offset);
  } else if (Instruction_aarch64::extract(insn, 30, 25) == 0b011010) {
    // Compare & branch (immediate)
    Instruction_aarch64::spatch(branch, 23, 5, offset);
  } else if (Instruction_aarch64::extract(insn, 30, 25) == 0b011011) {
    // Test & branch (immediate)
    Instruction_aarch64::spatch(branch, 18, 5, offset);
  } else if (Instruction_aarch64::extract(insn, 28, 24) == 0b10000) {
    // PC-rel. addressing
    offset = target-branch;
    int shift = Instruction_aarch64::extract(insn, 31, 31) ? 12 : 0;
    offset >>= shift;
    int offset_lo = offset & 3;
    offset >>= 2;
    Instruction_aarch64::spatch(branch, 18, 5, offset);
    Instruction_aarch64::spatch(branch, 30, 29, offset_lo);
  } else {
    abort();
  }
}

bool Assembler::operand_valid_for_logical_immdiate(int is32, uint64_t imm) {
  return encode_immediate_v2(is32, imm) != 0xffffffff;
}

int AbstractAssembler::code_fill_byte() {
  return 0;
}

void MacroAssembler::serialize_memory(Register thread, Register tmp) {
  dmb(Assembler::SY);
}


void MacroAssembler::reset_last_Java_frame(bool clear_fp,
                                           bool clear_pc) {
  // we must set sp to zero to clear frame
  str(zr, Address(rthread, JavaThread::last_Java_sp_offset()));
  // must clear fp, so that compiled frames are not confused; it is
  // possible that we need it only for debugging
  if (clear_fp) {
    str(zr, Address(rthread, JavaThread::last_Java_fp_offset()));
  }

  if (clear_pc) {
    str(zr, Address(rthread, JavaThread::last_Java_pc_offset()));
  }
}

// Calls to C land
//
// When entering C land, the rfp, & resp of the last Java frame have to be recorded
// in the (thread-local) JavaThread object. When leaving C land, the last Java fp
// has to be reset to 0. This is required to allow proper stack traversal.
void MacroAssembler::set_last_Java_frame(Register last_java_sp,
                                         Register last_java_fp,
                                         address  last_java_pc) {
  // determine last_java_sp register
  if (!last_java_sp->is_valid()) {
    last_java_sp = sp;
  }

  // last_java_fp is optional
  if (last_java_fp->is_valid()) {
    str(last_java_fp, Address(rthread, JavaThread::last_Java_fp_offset()));
  }

  if (last_java_pc != NULL) {
    mov(rscratch1, last_java_pc);
  } else {
    Label here;
    adr(rscratch1, here);
    bind(here);
  }
  str(rscratch1, Address(rthread,
			 JavaThread::frame_anchor_offset()
			 + JavaFrameAnchor::last_Java_pc_offset()));

  if (last_java_sp == sp) {
    mov(rscratch1, sp);
    last_java_sp = rscratch1;
  }
  str(last_java_sp, Address(rthread, JavaThread::last_Java_sp_offset()));
}

// added to make this compile

REGISTER_DEFINITION(Register, noreg);

static void pass_arg0(MacroAssembler* masm, Register arg) {
  if (c_rarg0 != arg ) {
    masm->mov(c_rarg0, arg);
  }
}

static void pass_arg1(MacroAssembler* masm, Register arg) {
  if (c_rarg1 != arg ) {
    masm->mov(c_rarg1, arg);
  }
}

static void pass_arg2(MacroAssembler* masm, Register arg) {
  if (c_rarg2 != arg ) {
    masm->mov(c_rarg2, arg);
  }
}

static void pass_arg3(MacroAssembler* masm, Register arg) {
  if (c_rarg3 != arg ) {
    masm->mov(c_rarg3, arg);
  }
}

void MacroAssembler::call_VM_base(Register oop_result,
				  Register java_thread,
				  Register last_java_sp,
				  address  entry_point,
				  int      number_of_arguments,
				  bool     check_exceptions) {
   // determine java_thread register
  if (!java_thread->is_valid()) {
    java_thread = rthread;
  }

  // determine last_java_sp register
  if (!last_java_sp->is_valid()) {
    last_java_sp = sp;
  }

  // debugging support
  assert(number_of_arguments >= 0   , "cannot have negative number of arguments");
  assert(java_thread == rthread, "unexpected register");
#ifdef ASSERT
  // TraceBytecodes does not use r12 but saves it over the call, so don't verify
  // r12 is the heapbase.
  // if (UseCompressedOops && !TraceBytecodes) verify_heapbase("call_VM_base");
#endif // ASSERT

  assert(java_thread != oop_result  , "cannot use the same register for java_thread & oop_result");
  assert(java_thread != last_java_sp, "cannot use the same register for java_thread & last_java_sp");

  // push java thread (becomes first argument of C function)

  mov(c_rarg0, java_thread);

  // set last Java frame before call
  assert(last_java_sp != rfp, "can't use rfp");

  set_last_Java_frame(last_java_sp, rfp, NULL);

  // do the call, remove parameters
  MacroAssembler::call_VM_leaf_base(entry_point, number_of_arguments);

  // reset last Java frame
  // Only interpreter should have to clear fp
  reset_last_Java_frame(true, false);

#ifndef CC_INTERP
   // C++ interp handles this in the interpreter
  check_and_handle_popframe(java_thread);
  check_and_handle_earlyret(java_thread);
#endif /* CC_INTERP */

  if (check_exceptions) {
    // check for pending exceptions (java_thread is set upon return)
    ldr(rscratch1, Address(java_thread, in_bytes(Thread::pending_exception_offset())));
    cmp(rscratch1, (unsigned)NULL_WORD);
    // This used to conditionally jump to forward_exception however it is
    // possible if we relocate that the branch will not reach. So we must jump
    // around so we can always reach

    Label ok;
    br(Assembler::EQ, ok);
    lea(rscratch1, RuntimeAddress(StubRoutines::forward_exception_entry()));
    br(rscratch1);
    bind(ok);
  }

  // get oop result if there is one and reset the value in the thread
  if (oop_result->is_valid()) {
    ldr(oop_result, Address(java_thread, JavaThread::vm_result_offset()));
    str(zr, Address(java_thread, JavaThread::vm_result_offset()));
    verify_oop(oop_result, "broken oop in call_VM_base");
  }
}

void MacroAssembler::call_VM_helper(Register oop_result, address entry_point, int number_of_arguments, bool check_exceptions) {
  call_VM_base(oop_result, noreg, noreg, entry_point, number_of_arguments, check_exceptions);
}

// Implementation of call_VM versions

void MacroAssembler::call_VM(Register oop_result,
                             address entry_point,
                             bool check_exceptions) {
  call_VM_helper(oop_result, entry_point, 0, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             address entry_point,
                             Register arg_1,
                             bool check_exceptions) {
  pass_arg1(this, arg_1);
  call_VM_helper(oop_result, entry_point, 1, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             address entry_point,
                             Register arg_1,
                             Register arg_2,
                             bool check_exceptions) {
  assert(arg_1 != c_rarg2, "smashed arg");
  pass_arg2(this, arg_2);
  pass_arg1(this, arg_1);
  call_VM_helper(oop_result, entry_point, 2, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             address entry_point,
                             Register arg_1,
                             Register arg_2,
                             Register arg_3,
                             bool check_exceptions) {
  assert(arg_1 != c_rarg3, "smashed arg");
  assert(arg_2 != c_rarg3, "smashed arg");
  pass_arg3(this, arg_3);

  assert(arg_1 != c_rarg2, "smashed arg");
  pass_arg2(this, arg_2);

  pass_arg1(this, arg_1);
  call_VM_helper(oop_result, entry_point, 3, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             Register last_java_sp,
                             address entry_point,
                             int number_of_arguments,
                             bool check_exceptions) {
  call_VM_base(oop_result, rthread, last_java_sp, entry_point, number_of_arguments, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             Register last_java_sp,
                             address entry_point,
                             Register arg_1,
                             bool check_exceptions) {
  pass_arg1(this, arg_1);
  call_VM(oop_result, last_java_sp, entry_point, 1, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             Register last_java_sp,
                             address entry_point,
                             Register arg_1,
                             Register arg_2,
                             bool check_exceptions) {

  assert(arg_1 != c_rarg2, "smashed arg");
  pass_arg2(this, arg_2);
  pass_arg1(this, arg_1);
  call_VM(oop_result, last_java_sp, entry_point, 2, check_exceptions);
}

void MacroAssembler::call_VM(Register oop_result,
                             Register last_java_sp,
                             address entry_point,
                             Register arg_1,
                             Register arg_2,
                             Register arg_3,
                             bool check_exceptions) {
  assert(arg_1 != c_rarg3, "smashed arg");
  assert(arg_2 != c_rarg3, "smashed arg");
  pass_arg3(this, arg_3);
  assert(arg_1 != c_rarg2, "smashed arg");
  pass_arg2(this, arg_2);
  pass_arg1(this, arg_1);
  call_VM(oop_result, last_java_sp, entry_point, 3, check_exceptions);
}


void MacroAssembler::check_and_handle_earlyret(Register java_thread) {Unimplemented(); }

void MacroAssembler::align(int modulus) {
  while (offset() % modulus != 0) nop();
}

void MacroAssembler::check_and_handle_popframe(Register java_thread) { Unimplemented(); }

RegisterOrConstant MacroAssembler::delayed_value_impl(intptr_t* delayed_value_addr,
                                                      Register tmp,
                                                      int offset) { Unimplemented(); return RegisterOrConstant(r0); }

void MacroAssembler::check_klass_subtype(Register sub_klass,
                           Register super_klass,
                           Register temp_reg,
                           Label& L_success) {
  Label L_failure;
  check_klass_subtype_fast_path(sub_klass, super_klass, temp_reg,        &L_success, &L_failure, NULL);
  check_klass_subtype_slow_path(sub_klass, super_klass, temp_reg, noreg, &L_success, NULL);
  bind(L_failure);
}


void MacroAssembler::check_klass_subtype_fast_path(Register sub_klass,
                                                   Register super_klass,
                                                   Register temp_reg,
                                                   Label* L_success,
                                                   Label* L_failure,
                                                   Label* L_slow_path,
                                        RegisterOrConstant super_check_offset) {
  assert_different_registers(sub_klass, super_klass, temp_reg);
  bool must_load_sco = (super_check_offset.constant_or_zero() == -1);
  if (super_check_offset.is_register()) {
    assert_different_registers(sub_klass, super_klass,
                               super_check_offset.as_register());
  } else if (must_load_sco) {
    assert(temp_reg != noreg, "supply either a temp or a register offset");
  }

  Label L_fallthrough;
  int label_nulls = 0;
  if (L_success == NULL)   { L_success   = &L_fallthrough; label_nulls++; }
  if (L_failure == NULL)   { L_failure   = &L_fallthrough; label_nulls++; }
  if (L_slow_path == NULL) { L_slow_path = &L_fallthrough; label_nulls++; }
  assert(label_nulls <= 1, "at most one NULL in the batch");

  int sc_offset = in_bytes(Klass::secondary_super_cache_offset());
  int sco_offset = in_bytes(Klass::super_check_offset_offset());
  Address super_check_offset_addr(super_klass, sco_offset);

  // Hacked jmp, which may only be used just before L_fallthrough.
#define final_jmp(label)                                                \
  if (&(label) == &L_fallthrough) { /*do nothing*/ }                    \
  else                            b(label)                /*omit semi*/

  // If the pointers are equal, we are done (e.g., String[] elements).
  // This self-check enables sharing of secondary supertype arrays among
  // non-primary types such as array-of-interface.  Otherwise, each such
  // type would need its own customized SSA.
  // We move this check to the front of the fast path because many
  // type checks are in fact trivially successful in this manner,
  // so we get a nicely predicted branch right at the start of the check.
  cmp(sub_klass, super_klass);
  br(Assembler::EQ, *L_success);

  // Check the supertype display:
  if (must_load_sco) {
    // Positive movl does right thing on LP64.
    ldr(temp_reg, super_check_offset_addr);
    super_check_offset = RegisterOrConstant(temp_reg);
  }
  Address super_check_addr(sub_klass, super_check_offset);
  ldr(rscratch1, super_check_addr);
  cmp(super_klass, rscratch1); // load displayed supertype

  // This check has worked decisively for primary supers.
  // Secondary supers are sought in the super_cache ('super_cache_addr').
  // (Secondary supers are interfaces and very deeply nested subtypes.)
  // This works in the same check above because of a tricky aliasing
  // between the super_cache and the primary super display elements.
  // (The 'super_check_addr' can address either, as the case requires.)
  // Note that the cache is updated below if it does not help us find
  // what we need immediately.
  // So if it was a primary super, we can just fail immediately.
  // Otherwise, it's the slow path for us (no success at this point).

  if (super_check_offset.is_register()) {
    br(Assembler::EQ, *L_success);
    cmp(super_check_offset.as_register(), sc_offset);
    if (L_failure == &L_fallthrough) {
      br(Assembler::EQ, *L_slow_path);
    } else {
      br(Assembler::NE, *L_failure);
      final_jmp(*L_slow_path);
    }
  } else if (super_check_offset.as_constant() == sc_offset) {
    // Need a slow path; fast failure is impossible.
    if (L_slow_path == &L_fallthrough) {
      br(Assembler::EQ, *L_success);
    } else {
      br(Assembler::NE, *L_slow_path);
      final_jmp(*L_success);
    }
  } else {
    // No slow path; it's a fast decision.
    if (L_failure == &L_fallthrough) {
      br(Assembler::EQ, *L_success);
    } else {
      br(Assembler::NE, *L_failure);
      final_jmp(*L_success);
    }
  }

  bind(L_fallthrough);

#undef final_jmp
}

// These two are taken from x86, but they look generally useful

// scans count pointer sized words at [addr] for occurence of value,
// generic
void MacroAssembler::repne_scan(Register addr, Register value, Register count,
				Register scratch) {
  Label Lloop, Lexit;
  cbz(count, Lexit);
  bind(Lloop);
  ldr(scratch, post(addr, wordSize));
  cmp(value, scratch);
  br(EQ, Lexit);
  sub(count, count, 1);
  cbnz(count, Lloop);
  bind(Lexit);
}

// scans count 4 byte words at [addr] for occurence of value,
// generic
void MacroAssembler::repne_scanw(Register addr, Register value, Register count,
				Register scratch) {
  Label Lloop, Lexit;
  cbz(count, Lexit);
  bind(Lloop);
  ldrw(scratch, post(addr, wordSize));
  cmpw(value, scratch);
  br(EQ, Lexit);
  sub(count, count, 1);
  cbnz(count, Lloop);
  bind(Lexit);
}

void MacroAssembler::check_klass_subtype_slow_path(Register sub_klass,
                                                   Register super_klass,
                                                   Register temp_reg,
                                                   Register temp2_reg,
                                                   Label* L_success,
                                                   Label* L_failure,
                                                   bool set_cond_codes) {
  assert_different_registers(sub_klass, super_klass, temp_reg);
  if (temp2_reg != noreg)
    assert_different_registers(sub_klass, super_klass, temp_reg, temp2_reg, rscratch1);
#define IS_A_TEMP(reg) ((reg) == temp_reg || (reg) == temp2_reg)

  Label L_fallthrough;
  int label_nulls = 0;
  if (L_success == NULL)   { L_success   = &L_fallthrough; label_nulls++; }
  if (L_failure == NULL)   { L_failure   = &L_fallthrough; label_nulls++; }
  assert(label_nulls <= 1, "at most one NULL in the batch");

  // a couple of useful fields in sub_klass:
  int ss_offset = in_bytes(Klass::secondary_supers_offset());
  int sc_offset = in_bytes(Klass::secondary_super_cache_offset());
  Address secondary_supers_addr(sub_klass, ss_offset);
  Address super_cache_addr(     sub_klass, sc_offset);

  // Do a linear scan of the secondary super-klass chain.
  // This code is rarely used, so simplicity is a virtue here.
  // The repne_scan instruction uses fixed registers, which we must spill.
  // Don't worry too much about pre-existing connections with the input regs.

  assert(sub_klass != r0, "killed reg"); // killed by mov(r0, super)
  assert(sub_klass != r2, "killed reg"); // killed by lea(r2, &pst_counter)

  // Get super_klass value into r0 (even if it was in r5 or r2).
  bool pushed_r0 = false, pushed_r2 = false, pushed_r5 = false;
  if (super_klass != r0 || UseCompressedOops) {
    if (!IS_A_TEMP(r0)) { push(r0); pushed_r0 = true; }
    mov(r0, super_klass);
  }
  if (!IS_A_TEMP(r2)) { push(r2); pushed_r2 = true; }
  if (!IS_A_TEMP(r5)) { push(r5); pushed_r5 = true; }

#ifndef PRODUCT
  mov(rscratch2, (address)&SharedRuntime::_partial_subtype_ctr);
  Address pst_counter_addr(rscratch2);
  ldr(rscratch1, pst_counter_addr);
  add(rscratch1, rscratch1, 1);
  str(rscratch1, pst_counter_addr);
#endif //PRODUCT

  // We will consult the secondary-super array.
  ldr(r5, secondary_supers_addr);
  // Load the array length.  (Positive movl does right thing on LP64.)
  ldr(r2, Address(r5, arrayOopDesc::length_offset_in_bytes()));
  // Skip to start of data.
  add(r5, r5, arrayOopDesc::base_offset_in_bytes(T_OBJECT));

  // Scan R2 words at [R5] for an occurrence of R0.
  // Set NZ/Z based on last compare.
  // Z flag value will not be set by 'repne' if R2 == 0 since 'repne' does
  // not change flags (only scas instruction which is repeated sets flags).
  // Set Z = 0 (not equal) before 'repne' to indicate that class was not found.

  // This part is tricky, as values in supers array could be 32 or 64 bit wide
  // and we store values in objArrays always encoded, thus we need to encode
  // the value of r0 before repne.  Note that r0 is dead after the repne.
  if (UseCompressedOops) {
    encode_heap_oop_not_null(r0); // Changes flags.
    // The superclass is never null; it would be a basic system error if a null
    // pointer were to sneak in here.  Note that we have already loaded the
    // Klass::super_check_offset from the super_klass in the fast path,
    // so if there is a null in that register, we are already in the afterlife.
    repne_scanw(r5, r0, r2, rscratch1);
  } else {
    repne_scan(r5, r0, r2, rscratch1);
  }
  // Unspill the temp. registers:
  if (pushed_r5)  pop(r5);
  if (pushed_r2)  pop(r2);
  if (pushed_r0)  pop(r0);

  if (set_cond_codes) {
    // Special hack for the AD files:  r5 is guaranteed non-zero.
    assert(!pushed_r5, "r5 must be left non-NULL");
    // Also, the condition codes are properly set Z/NZ on succeed/failure.
  }

  cbz(r2, *L_failure);

  // Success.  Cache the super we found and proceed in triumph.
  str(super_klass, super_cache_addr);

  if (L_success != &L_fallthrough) {
    b(*L_success);
  }

#undef IS_A_TEMP

  bind(L_fallthrough);
}


void MacroAssembler::verify_oop(Register reg, const char* s) {
  if (!VerifyOops) return;

  Unimplemented();
}

void Assembler::bang_stack_with_offset(int offset) { Unimplemented(); }

void MacroAssembler::call_VM_leaf_base(address entry_point,
                                       int number_of_arguments) {
  Label E, L;
  // Align stack if necessary
  mov(rscratch1, sp);
  tst(rscratch1, 0x0f);
  br(Assembler::EQ, L);

  sub(sp, sp, 8);
  {
    mov(rscratch1, entry_point);
    // We add 1 to number_of_arguments because the thread in arg0 is
    // not counted
    brx86(rscratch1, number_of_arguments + 1, 0, 1);
  }
  add(sp, sp, 8);
  b(E);

  bind(L);
  {
    mov(rscratch1, entry_point);
    brx86(rscratch1, number_of_arguments + 1, 0, 1);
  }

  bind(E);
}

void MacroAssembler::call_VM_leaf(address entry_point, Register arg_0) {
  pass_arg0(this, arg_0);
  call_VM_leaf_base(entry_point, 1);
}

void MacroAssembler::call_VM_leaf(address entry_point, Register arg_0, Register arg_1) {
  pass_arg0(this, arg_0);
  pass_arg1(this, arg_1);
  call_VM_leaf_base(entry_point, 2);
}

void MacroAssembler::call_VM_leaf(address entry_point, Register arg_0,
				  Register arg_1, Register arg_2) {
  pass_arg0(this, arg_0);
  pass_arg1(this, arg_1);
  pass_arg2(this, arg_2);
  call_VM_leaf_base(entry_point, 3);
}

void MacroAssembler::super_call_VM_leaf(address entry_point, Register arg_0) {
  pass_arg0(this, arg_0);
  MacroAssembler::call_VM_leaf_base(entry_point, 1);
}

void MacroAssembler::super_call_VM_leaf(address entry_point, Register arg_0, Register arg_1) {

  assert(arg_0 != c_rarg1, "smashed arg");
  pass_arg1(this, arg_1);
  pass_arg0(this, arg_0);
  MacroAssembler::call_VM_leaf_base(entry_point, 2);
}

void MacroAssembler::super_call_VM_leaf(address entry_point, Register arg_0, Register arg_1, Register arg_2) {
  assert(arg_0 != c_rarg2, "smashed arg");
  assert(arg_1 != c_rarg2, "smashed arg");
  pass_arg2(this, arg_2);
  assert(arg_0 != c_rarg1, "smashed arg");
  pass_arg1(this, arg_1);
  pass_arg0(this, arg_0);
  MacroAssembler::call_VM_leaf_base(entry_point, 3);
}

void MacroAssembler::super_call_VM_leaf(address entry_point, Register arg_0, Register arg_1, Register arg_2, Register arg_3) {
  assert(arg_0 != c_rarg3, "smashed arg");
  assert(arg_1 != c_rarg3, "smashed arg");
  assert(arg_2 != c_rarg3, "smashed arg");
  pass_arg3(this, arg_3);
  assert(arg_0 != c_rarg2, "smashed arg");
  assert(arg_1 != c_rarg2, "smashed arg");
  pass_arg2(this, arg_2);
  assert(arg_0 != c_rarg1, "smashed arg");
  pass_arg1(this, arg_1);
  pass_arg0(this, arg_0);
  MacroAssembler::call_VM_leaf_base(entry_point, 4);
}

void MacroAssembler::null_check(Register reg, int offset) {
  if (needs_explicit_null_check(offset)) {
    // provoke OS NULL exception if reg = NULL by
    // accessing M[reg] w/o changing any (non-CC) registers
    // NOTE: cmpl is plenty here to provoke a segv
    ldr(zr, Address(reg));
    // Note: should probably use testl(rax, Address(reg, 0));
    //       may be shorter code (however, this version of
    //       testl needs to be implemented first)
  } else {
    // nothing to do, (later) access of M[reg + offset]
    // will provoke OS NULL exception if reg = NULL
  }
}

// MacroAssembler protected routines needed to implement
// public methods

void MacroAssembler::mov_immediate64(Register dst, u_int64_t imm64)
{
  if (operand_valid_for_logical_immdiate(0, imm64)) {
    orr(dst, zr, imm64);
  } else {
    // we can use a combination of MOVZ or MOVN with
    // MOVK to build up the constant
    u_int64_t imm_h[4];
    int zero_count = 0;
    int neg_count = 0;
    int i;
    for (i = 0; i < 4; i++) {
      imm_h[i] = ((imm64 >> (i * 16)) & 0xffffL);
      if (imm_h[i] == 0) {
	zero_count++;
      } else if (imm_h[i] == 0xffffL) {
	neg_count++;
      }
    }
    if (zero_count == 4) {
      // one MOVZ will do
      movz(dst, 0);
    } else if (zero_count == 3) {
      for (i = 0; i < 3; i++) {
	if (imm_h[i] != 0L) {
	  movz(dst, (u_int32_t)imm_h[i], (i << 4));
	  break;
	}
      }
    } else if (neg_count == 3) {
      // one MOVN will do
      for (int i = 0; i < 3; i++) {
	if (imm_h[i] != 0xffffL) {
	  movn(dst, (u_int32_t)imm_h[i], (i << 4));
	  break;
	}
      }
    } else if (zero_count == 2) {
      // one MOVZ and one MOVK will do
      for (i = 0; i < 3; i++) {
	if (imm_h[i] != 0L) {
	  movz(dst, (u_int32_t)imm_h[i], (i << 4));
	  i++;
	  break;
	}
      }
      for (;i < 3; i++) {
	if (imm_h[i] != 0L) {
	  movk(dst, (u_int32_t)imm_h[i], (i << 4));
	}
      }
    } else if (neg_count == 2) {
      // one MOVN and one MOVK will do
      for (i = 0; i < 3; i++) {
	if (imm_h[i] != 0xffffL) {
	  movn(dst, (u_int32_t)imm_h[i] ^ 0xffffL, (i << 4));
	  i++;
	  break;
	}
      }
      for (;i < 3; i++) {
	if (imm_h[i] != 0xffffL) {
	  movk(dst, (u_int32_t)imm_h[i], (i << 4));
	}
      }
    } else if (zero_count == 1) {
      // one MOVZ and two MOVKs will do
      for (i = 0; i < 3; i++) {
	if (imm_h[i] != 0L) {
	  movz(dst, (u_int32_t)imm_h[i], (i << 4));
	  i++;
	  break;
	}
      }
      for (;i < 3; i++) {
	if (imm_h[i] != 0x0L) {
	  movk(dst, (u_int32_t)imm_h[i], (i << 4));
	}
      }
    } else if (neg_count == 1) {
      // one MOVN and two MOVKs will do
      for (i = 0; i < 3; i++) {
	if (imm_h[i] != 0xffffL) {
	  movn(dst, (u_int32_t)imm_h[i] ^ 0xffffL, (i << 4));
	  i++;
	  break;
	}
      }
      for (;i < 3; i++) {
	if (imm_h[i] != 0xffffL) {
	  movk(dst, (u_int32_t)imm_h[i], (i << 4));
	}
      }
    } else {
      // use a MOVZ and 3 MOVKs (makes it easier to debug)
      movz(dst, (u_int32_t)imm_h[0], 0);
      for (i = 1; i < 3; i++) {
	movk(dst, (u_int32_t)imm_h[i], (i << 4));
      }
    }
  }
}

void MacroAssembler::mov_immediate32(Register dst, u_int32_t imm32)
{
  if (operand_valid_for_logical_immdiate(1, imm32)) {
    orrw(dst, zr, imm32);
  } else {
    // we can use MOVZ, MOVN or two calls to MOVK to build up the
    // constant
    u_int32_t imm_h[2];
    imm_h[0] = imm32 & 0xffff;
    imm_h[1] = ((imm32 >> 16) & 0xffff);
    if (imm_h[0] == 0) {
      movzw(dst, imm_h[1], 16);
    } else if (imm_h[0] == 0xffff) {
      movnw(dst, imm_h[1], 16);
    } else if (imm_h[1] == 0) {
      movzw(dst, imm_h[0], 0);
    } else if (imm_h[1] == 0xffff) {
      movnw(dst, imm_h[0], 0);
    } else {
      // use a MOVZ and MOVK (makes it easier to debug)
      movzw(dst, imm_h[0], 0);
      movkw(dst, imm_h[1], 16);
    }
  }
}


// Packed operands for  Floating-point Move (immediate)

static float unpack(unsigned value) {
  union {
    unsigned ival;
    float val;
  };
  ival = expand_fp_imm(false, value);
  return val;
}

unsigned Assembler::pack(double value) {
  union {
    unsigned ival;
    float val;
  };
  val = (float)value;
  unsigned result = encode_v2_imm_float_bits(ival);
  guarantee(unpack(result) == value,
	    "Invalid floating-point immediate operand");
  return result;
}

// MacroAssembler routines found actually to be needed

void MacroAssembler::push(Register src)
{
  str(src, Address(pre(sp, -1 * wordSize)));
}

void MacroAssembler::pop(Register dst)
{
  ldr(dst, Address(post(sp, 1 * wordSize)));
}

// Note: load_unsigned_short used to be called load_unsigned_word.
int MacroAssembler::load_unsigned_short(Register dst, Address src) {
  int off = offset();
  ldrh(dst, src);
  return off;
}

int MacroAssembler::load_unsigned_byte(Register dst, Address src) {
  int off = offset();
  ldrb(dst, src);
  return off;
}

int MacroAssembler::load_signed_short(Register dst, Address src) {
  int off = offset();
  ldrsh(dst, src);
  return off;
}

int MacroAssembler::load_signed_byte(Register dst, Address src) {
  int off = offset();
  ldrsb(dst, src);
  return off;
}

void MacroAssembler::pusha() {
  // need to push all registers including original sp
  for (Register reg = r0; reg <= r30; reg = as_Register(reg->encoding() + 1))
    push(reg);
  // cannot push sp as str will treat it as zr !!!
  mov(r0, sp);
  push(r0);
  // re-establish r0? we probably only use pusha when we are about to
  // exit so we don't necessarily have to do this but let's leave the
  // registers as they were just in case.
  ldr(r0, Address(sp, 31 * wordSize));
}

void MacroAssembler::popa() {
  // need to pop all registers including original sp
  pop(r0);
  mov(sp, r0);
  for (Register reg = r30;
       reg->is_valid() && reg >= r0;
       reg = as_Register(reg->encoding() - 1))
    pop(reg);
}

// Push lots of registers in the bit set supplied.  Don't push sp.
void MacroAssembler::push(unsigned int bitset) {
  // need to push all registers including original sp
  for (Register reg = r0; reg <= r30; reg = as_Register(reg->encoding() + 1)) {
    if (bitset & 1)
      push(reg);
    bitset >>= 1;
  }
}

void MacroAssembler::pop(unsigned int bitset) {
  for (Register reg = r30;
       reg->is_valid() && reg >= r0;
       reg = as_Register(reg->encoding() - 1)) {
    bitset <<= 1;
    if (bitset & (1 << 31))
      pop(reg);
  }
}

void MacroAssembler::stop(const char* msg) {
  address ip = pc();
  pusha();
  mov(c_rarg0, (address)msg);
  mov(c_rarg1, (address)ip);
  mov(c_rarg2, sp);
  // round down sp to 16 byte boundary
  // (assumes literal will encode directly)
  andr(sp, c_rarg2, ~0xfUL);
  mov(c_rarg3, CAST_FROM_FN_PTR(address, MacroAssembler::debug64));
  // call(c_rarg3);
  brx86(c_rarg3, 3, 0, 1);
  hlt(0);
}

void MacroAssembler::enter()
{
  push(lr);
  push(rfp);
  mov(rfp, sp);
}

void MacroAssembler::leave()
{
  mov(sp, rfp);
  pop(rfp);
  pop(lr);
}

void MacroAssembler::reinit_heapbase()
{
  if (UseCompressedOops) {
    mov(rheapbase, (address)Universe::narrow_oop_base_addr());
  }
}

void MacroAssembler::cmpxchgptr(Register reg, Register addr, Register tmp) {
  Label nope, ok;
  ldxr(tmp, addr);
  cmp(tmp, reg);
  br(Assembler::NE, nope);
  stxr(tmp, reg, addr);
  cbzw(tmp, ok);
  bind(nope);
  mov(tmp, 1);
  bind(ok);
}

void MacroAssembler::incr_allocated_bytes(Register thread,
                                          Register var_size_in_bytes,
                                          int con_size_in_bytes,
                                          Register t1) {
  if (!thread->is_valid()) {
    thread = rthread;
  }
  assert(t1->is_valid(), "need temp reg");

  ldr(t1, Address(thread, in_bytes(JavaThread::allocated_bytes_offset())));
  if (var_size_in_bytes->is_valid()) {
    add(t1, t1, var_size_in_bytes);
  } else {
    add(t1, t1, con_size_in_bytes);
  }
  str(t1, Address(thread, in_bytes(JavaThread::allocated_bytes_offset())));
}

#ifndef PRODUCT
extern "C" void findpc(intptr_t x);
#endif

void MacroAssembler::debug64(char* msg, int64_t pc, int64_t regs[])
{
  // In order to get locks to work, we need to fake a in_VM state
  if (ShowMessageBoxOnError ) {
    JavaThread* thread = JavaThread::current();
    JavaThreadState saved_state = thread->thread_state();
    thread->set_thread_state(_thread_in_vm);
#ifndef PRODUCT
    if (CountBytecodes || TraceBytecodes || StopInterpreterAt) {
      ttyLocker ttyl;
      BytecodeCounter::print();
    }
#endif
    // To see where a verify_oop failed, get $ebx+40/X for this frame.
    // XXX correct this offset for amd64
    // This is the value of eip which points to where verify_oop will return.
    if (os::message_box(msg, "Execution stopped, print registers?")) {
      ttyLocker ttyl;
      tty->print_cr(" pc = 0x%016lx", pc);
#ifndef PRODUCT
      tty->cr();
      findpc(pc);
      tty->cr();
#endif
      tty->print_cr(" r0 = 0x%016lx", regs[0]);
      tty->print_cr(" r1 = 0x%016lx", regs[1]);
      tty->print_cr(" r2 = 0x%016lx", regs[2]);
      tty->print_cr(" r3 = 0x%016lx", regs[3]);
      tty->print_cr(" r4 = 0x%016lx", regs[4]);
      tty->print_cr(" r5 = 0x%016lx", regs[5]);
      tty->print_cr(" r6 = 0x%016lx", regs[6]);
      tty->print_cr(" r7 = 0x%016lx", regs[7]);
      tty->print_cr(" r8 = 0x%016lx", regs[8]);
      tty->print_cr(" r9 = 0x%016lx", regs[9]);
      tty->print_cr("r10 = 0x%016lx", regs[10]);
      tty->print_cr("r11 = 0x%016lx", regs[11]);
      tty->print_cr("r12 = 0x%016lx", regs[12]);
      tty->print_cr("r13 = 0x%016lx", regs[13]);
      tty->print_cr("r14 = 0x%016lx", regs[14]);
      tty->print_cr("r15 = 0x%016lx", regs[15]);
      tty->print_cr("r16 = 0x%016lx", regs[16]);
      tty->print_cr("r17 = 0x%016lx", regs[17]);
      tty->print_cr("r18 = 0x%016lx", regs[18]);
      tty->print_cr("r19 = 0x%016lx", regs[19]);
      tty->print_cr("r20 = 0x%016lx", regs[20]);
      tty->print_cr("r21 = 0x%016lx", regs[21]);
      tty->print_cr("r22 = 0x%016lx", regs[22]);
      tty->print_cr("r23 = 0x%016lx", regs[23]);
      tty->print_cr("r24 = 0x%016lx", regs[24]);
      tty->print_cr("r25 = 0x%016lx", regs[25]);
      tty->print_cr("r26 = 0x%016lx", regs[26]);
      tty->print_cr("r27 = 0x%016lx", regs[27]);
      tty->print_cr("r28 = 0x%016lx", regs[28]);
      tty->print_cr("r30 = 0x%016lx", regs[30]);
      tty->print_cr("r31 = 0x%016lx", regs[31]);
      BREAKPOINT;
    }
    ThreadStateTransition::transition(thread, _thread_in_vm, saved_state);
  } else {
    ttyLocker ttyl;
    ::tty->print_cr("=============== DEBUG MESSAGE: %s ================\n",
                    msg);
    assert(false, err_msg("DEBUG MESSAGE: %s", msg));
  }
}

// routine to generate an x86 prolog for a stub function which
// bootstraps into the generated ARM code which directly follows the
// stub
//
// the argument encodes the number of general and fp registers
// passed by the caller and the callng convention (currently just
// the number of general registers and assumes C argument passing)

extern "C" {
int aarch64_stub_prolog_size();
void aarch64_stub_prolog();
void setup_arm_sim(void *sp, int calltype);
}

void MacroAssembler::c_stub_prolog(int gp_arg_count, int fp_arg_count, int ret_type)
{
  int calltype = (((ret_type & 0x3) << 8) |
		  ((fp_arg_count & 0xf) << 4) |
		  (gp_arg_count & 0xf));

  // the addresses for the x86 to ARM entry code we need to use
  address start = pc();
  // printf("start = %lx\n", start);
  int byteCount =  aarch64_stub_prolog_size();
  // printf("byteCount = %x\n", byteCount);
  int instructionCount = (byteCount + 3)/ 4;
  // printf("instructionCount = %x\n", instructionCount);
  for (int i = 0; i < instructionCount; i++) {
    nop();
  }

  memcpy(start, (void*)aarch64_stub_prolog, byteCount);

  // write the address of the setup routine and the call format at the
  // end of into the copied code
  u_int64_t *patch_end = (u_int64_t *)(start + byteCount);
  patch_end[-2] = (u_int64_t)setup_arm_sim;
  patch_end[-1] = calltype;
}

void MacroAssembler::push_CPU_state() {
  call_Unimplemented();
}

SkipIfEqual::SkipIfEqual(
    MacroAssembler* masm, const bool* flag_addr, bool value) {
  _masm = masm;
  _masm->mov(rscratch1, (address)flag_addr);
  _masm->ldrb(rscratch1, rscratch1);
  _masm->cmp(rscratch1, value);
  _masm->br(Assembler::EQ, _label);
}

SkipIfEqual::~SkipIfEqual() {
  _masm->bind(_label);
}

void MacroAssembler::cmpptr(Register src1, Address src2) {
  ldr(rscratch1, src2);
  cmp(src1, rscratch1);
}

#ifdef ASSERT
void MacroAssembler::verify_heapbase(const char* msg) {
  assert (UseCompressedOops, "should be compressed");
  assert (Universe::heap() != NULL, "java heap should be initialized");
  if (CheckCompressedOops) {
    Label ok;
    push(rscratch1); // cmpptr trashes rscratch1
    cmpptr(rheapbase, ExternalAddress((address)Universe::narrow_oop_base_addr()));
    br(Assembler::EQ, ok);
    stop(msg);
    bind(ok);
    pop(rscratch1);
  }
}
#endif

void MacroAssembler::store_check(Register obj) {
  // Does a store check for the oop in register obj. The content of
  // register obj is destroyed afterwards.
  store_check_part_1(obj);
  store_check_part_2(obj);
}

void MacroAssembler::store_check(Register obj, Address dst) {
  store_check(obj);
}


// split the store check operation so that other instructions can be scheduled inbetween
void MacroAssembler::store_check_part_1(Register obj) {
  BarrierSet* bs = Universe::heap()->barrier_set();
  assert(bs->kind() == BarrierSet::CardTableModRef, "Wrong barrier set kind");
  lsr(obj, obj, CardTableModRefBS::card_shift);
}

void MacroAssembler::store_check_part_2(Register obj) {
  BarrierSet* bs = Universe::heap()->barrier_set();
  assert(bs->kind() == BarrierSet::CardTableModRef, "Wrong barrier set kind");
  CardTableModRefBS* ct = (CardTableModRefBS*)bs;
  assert(sizeof(*ct->byte_map_base) == sizeof(jbyte), "adjust this code");

  // The calculation for byte_map_base is as follows:
  // byte_map_base = _byte_map - (uintptr_t(low_bound) >> card_shift);
  // So this essentially converts an address to a displacement and
  // it will never need to be relocated.

  // FIXME: It's not likely that disp will fit into an offset so we
  // don't bother to check, but it could save an instruction.
  intptr_t disp = (intptr_t) ct->byte_map_base;
  mov(rscratch1, disp);
  strb(zr, Address(obj, rscratch1));
}

void MacroAssembler::load_klass(Register dst, Register src) {
  ldr(dst, Address(src, oopDesc::klass_offset_in_bytes()));
  if (UseCompressedOops) {
    decode_heap_oop_not_null(dst);
  }
}

void MacroAssembler::store_klass(Register dst, Register src) {
  if (UseCompressedOops) {
    encode_heap_oop_not_null(src);
  }
  str(src, Address(dst, oopDesc::klass_offset_in_bytes()));
}

void MacroAssembler::store_klass_gap(Register dst, Register src) {
  if (UseCompressedOops) {
    // Store to klass gap in destination
    str(src, Address(dst, oopDesc::klass_gap_offset_in_bytes()));
  }
}

// Algorithm must match oop.inline.hpp encode_heap_oop.
void MacroAssembler::encode_heap_oop(Register r) {
#ifdef ASSERT
  verify_heapbase("MacroAssembler::encode_heap_oop: heap base corrupted?");
#endif
  verify_oop(r, "broken oop in encode_heap_oop");
  if (Universe::narrow_oop_base() == NULL) {
    if (Universe::narrow_oop_shift() != 0) {
      assert (LogMinObjAlignmentInBytes == Universe::narrow_oop_shift(), "decode alg wrong");
      lsr(r, r, LogMinObjAlignmentInBytes);
    }
    return;
  }
  {
    Label nonnull;
    cbnz(r, nonnull);
    sub(r, r, rheapbase);
    bind(nonnull);
    lsr(r, r, LogMinObjAlignmentInBytes);
  }
}

void MacroAssembler::encode_heap_oop_not_null(Register r) {
#ifdef ASSERT
  verify_heapbase("MacroAssembler::encode_heap_oop_not_null: heap base corrupted?");
  if (CheckCompressedOops) {
    Label ok;
    cbnz(r, ok);
    stop("null oop passed to encode_heap_oop_not_null");
    bind(ok);
  }
#endif
  verify_oop(r, "broken oop in encode_heap_oop_not_null");
  if (Universe::narrow_oop_base() != NULL) {
    sub(r, r, rheapbase);
  }
  if (Universe::narrow_oop_shift() != 0) {
    assert (LogMinObjAlignmentInBytes == Universe::narrow_oop_shift(), "decode alg wrong");
    lsr(r, r, LogMinObjAlignmentInBytes);
  }
}

void MacroAssembler::encode_heap_oop_not_null(Register dst, Register src) {
#ifdef ASSERT
  verify_heapbase("MacroAssembler::encode_heap_oop_not_null2: heap base corrupted?");
  if (CheckCompressedOops) {
    Label ok;
    cbnz(src, ok);
    stop("null oop passed to encode_heap_oop_not_null2");
    bind(ok);
  }
#endif
  verify_oop(src, "broken oop in encode_heap_oop_not_null2");
  {
    Label nonnull;
    cbz(src, nonnull);
    sub(dst, src, rheapbase);
    lsr(dst, dst, LogMinObjAlignmentInBytes);
    bind(nonnull);
  }
}

void  MacroAssembler::decode_heap_oop(Register r) {
#ifdef ASSERT
  verify_heapbase("MacroAssembler::decode_heap_oop: heap base corrupted?");
#endif
  if (Universe::narrow_oop_base() == NULL) {
    if (Universe::narrow_oop_shift() != 0) {
      assert (LogMinObjAlignmentInBytes == Universe::narrow_oop_shift(), "decode alg wrong");
      lsl(r, r, LogMinObjAlignmentInBytes);
    }
  } else {
    Label done;
    cbz(r, done);
    add(r, rheapbase, r, Assembler::LSL, LogMinObjAlignmentInBytes);
    bind(done);
  }
  verify_oop(r, "broken oop in decode_heap_oop");
}

void  MacroAssembler::decode_heap_oop_not_null(Register r) {
  // Note: it will change flags
  assert (UseCompressedOops, "should only be used for compressed headers");
  assert (Universe::heap() != NULL, "java heap should be initialized");
  // Cannot assert, unverified entry point counts instructions (see .ad file)
  // vtableStubs also counts instructions in pd_code_size_limit.
  // Also do not verify_oop as this is called by verify_oop.
  if (Universe::narrow_oop_shift() != 0) {
    assert(LogMinObjAlignmentInBytes == Universe::narrow_oop_shift(), "decode alg wrong");
    add(r, rheapbase, r, Assembler::LSL, LogMinObjAlignmentInBytes);
    if (Universe::narrow_oop_base() != NULL) {
      add(r, rheapbase, r, Assembler::LSL, LogMinObjAlignmentInBytes);
    } else {
      add(r, zr, r, Assembler::LSL, LogMinObjAlignmentInBytes);
    }
  } else {
    assert (Universe::narrow_oop_base() == NULL, "sanity");
  }
}

void  MacroAssembler::decode_heap_oop_not_null(Register dst, Register src) {
  // Note: it will change flags
  assert (UseCompressedOops, "should only be used for compressed headers");
  assert (Universe::heap() != NULL, "java heap should be initialized");
  // Cannot assert, unverified entry point counts instructions (see .ad file)
  // vtableStubs also counts instructions in pd_code_size_limit.
  // Also do not verify_oop as this is called by verify_oop.
  if (Universe::narrow_oop_shift() != 0) {
    assert(LogMinObjAlignmentInBytes == Universe::narrow_oop_shift(), "decode alg wrong");
    if (Universe::narrow_oop_base() != NULL) {
      add(dst, rheapbase, src, Assembler::LSL, LogMinObjAlignmentInBytes);
    } else {
      add(dst, zr, src, Assembler::LSL, LogMinObjAlignmentInBytes);
    }
  } else {
    assert (Universe::narrow_oop_base() == NULL, "sanity");
    if (dst != src) {
      mov(dst, src);
    }
  }
}

void MacroAssembler::store_heap_oop(Address dst, Register src) {
  if (UseCompressedOops) {
    assert(!dst.uses(src), "not enough registers");
    encode_heap_oop(src);
    strw(src, dst);
  } else
    str(src, dst);
}

// Used for storing NULLs.
void MacroAssembler::store_heap_oop_null(Address dst) {
  if (UseCompressedOops) {
    strw(zr, dst);
  } else
    str(zr, dst);
}

void MacroAssembler::g1_write_barrier_pre(Register obj,
                                          Register pre_val,
                                          Register thread,
                                          Register tmp,
                                          bool tosca_live,
                                          bool expand_call) { Unimplemented(); }

void MacroAssembler::g1_write_barrier_post(Register store_addr,
                                           Register new_val,
                                           Register thread,
                                           Register tmp,
                                           Register tmp2) { Unimplemented(); }

